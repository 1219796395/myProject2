// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"game-config/internal/biz"
	"game-config/internal/client"
	"game-config/internal/conf"
	"game-config/internal/data"
	"game-config/internal/middleware"
	"game-config/internal/server"
	"game-config/internal/service"
	"game-config/internal/task"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(bootstrap *conf.Bootstrap, logLogger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap, logLogger)
	if err != nil {
		return nil, nil, err
	}
	remoteConfigRepo := data.NewRemoteConfigRepo(dataData, logLogger)
	envManageRepo := data.NewEnvManageRepo(dataData, logLogger)
	remoteConfigLogRepo := data.NewRemoteConfigLogRepo(dataData, logLogger)
	remoteConfigLogic := biz.NewRemoteConfigLogic(remoteConfigRepo, envManageRepo, remoteConfigLogRepo, logLogger)
	remoteConfigService := service.NewRemoteConfigService(remoteConfigLogic, logLogger, bootstrap)
	envManageLogic := biz.NewEnvManageLogic(envManageRepo, remoteConfigRepo, logLogger)
	envManageService := service.NewEnvManageService(envManageLogic, logLogger)
	remoteConfigLogLogic := biz.NewRemoteConfigLogLogic(remoteConfigLogRepo, logLogger)
	remoteConfigLogService := service.NewRemoteConfigLogService(remoteConfigLogLogic, logLogger)
	networkConfigRepo := data.NewNetworkConfigRepo(dataData, logLogger)
	networkConfigLogRepo := data.NewNetworkConfigLogRepo(dataData, logLogger)
	networkConfigLogic := biz.NewNetworkConfigLogic(networkConfigRepo, envManageRepo, networkConfigLogRepo, logLogger, bootstrap)
	networkConfigService := service.NewNetworkConfigService(networkConfigLogic, logLogger, bootstrap)
	adminUserRepo := data.NewAdminUserRepo(dataData, logLogger)
	adminUserLogic := biz.NewAdminUserLogic(adminUserRepo, bootstrap, logLogger)
	authLogRepo := data.NewAuthLogRepo(dataData, logLogger)
	authLogLogic := biz.NewAuthLogUsecase(logLogger, authLogRepo, adminUserRepo)
	adminUserClient := client.NewAdminUserClient(logLogger, bootstrap)
	adminAuthService := service.NewAdminAuthService(logLogger, bootstrap, adminUserLogic, authLogLogic, adminUserClient)
	validateWithLogMiddleware := middleware.NewValidateWithLogMiddleware(logLogger, bootstrap)
	ipMiddleware := middleware.NewIpMiddleware(logLogger, bootstrap)
	authMiddleware := middleware.NewAuthMiddleware(logLogger, adminUserLogic, bootstrap)
	httpServer := server.NewHTTPServer(bootstrap, remoteConfigService, envManageService, remoteConfigLogService, networkConfigService, adminAuthService, validateWithLogMiddleware, ipMiddleware, authMiddleware, logLogger)
	metricsServer := server.NewMetricsServer(bootstrap, logLogger)
	grpcServer := server.NewGRPCServer(bootstrap, remoteConfigService, envManageService, remoteConfigLogService, networkConfigService, logLogger)
	networkConfigTask := task.NewNetworkConfigTask(bootstrap, logLogger, networkConfigLogic)
	remoteConfigTask := task.NewRemoteConfigTask(bootstrap, logLogger, remoteConfigLogic)
	taskTask := task.NewTask(bootstrap, logLogger, networkConfigTask, remoteConfigTask)
	app := newApp(logLogger, httpServer, metricsServer, grpcServer, taskTask)
	return app, func() {
		cleanup()
	}, nil
}
