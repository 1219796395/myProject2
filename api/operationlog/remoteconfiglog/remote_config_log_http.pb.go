// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: api/operationlog/remoteconfiglog/remote_config_log.proto

package remoteconfiglog

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRemoteConfigLogGetRemoteConfigLogList = "/api.operationlog.remoteconfiglog.RemoteConfigLog/GetRemoteConfigLogList"

type RemoteConfigLogHTTPServer interface {
	// GetRemoteConfigLogList 1. 查询日志列表：GetLogList
	GetRemoteConfigLogList(context.Context, *GetRemoteConfigLogListReq) (*GetRemoteConfigLogListRsp, error)
}

func RegisterRemoteConfigLogHTTPServer(s *http.Server, srv RemoteConfigLogHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/remote_config_log/get_remote_config_log_list", _RemoteConfigLog_GetRemoteConfigLogList0_HTTP_Handler(srv))
}

func _RemoteConfigLog_GetRemoteConfigLogList0_HTTP_Handler(srv RemoteConfigLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRemoteConfigLogListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRemoteConfigLogGetRemoteConfigLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRemoteConfigLogList(ctx, req.(*GetRemoteConfigLogListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRemoteConfigLogListRsp)
		return ctx.Result(200, reply)
	}
}

type RemoteConfigLogHTTPClient interface {
	GetRemoteConfigLogList(ctx context.Context, req *GetRemoteConfigLogListReq, opts ...http.CallOption) (rsp *GetRemoteConfigLogListRsp, err error)
}

type RemoteConfigLogHTTPClientImpl struct {
	cc *http.Client
}

func NewRemoteConfigLogHTTPClient(client *http.Client) RemoteConfigLogHTTPClient {
	return &RemoteConfigLogHTTPClientImpl{client}
}

func (c *RemoteConfigLogHTTPClientImpl) GetRemoteConfigLogList(ctx context.Context, in *GetRemoteConfigLogListReq, opts ...http.CallOption) (*GetRemoteConfigLogListRsp, error) {
	var out GetRemoteConfigLogListRsp
	pattern := "/admin/remote_config_log/get_remote_config_log_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRemoteConfigLogGetRemoteConfigLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
