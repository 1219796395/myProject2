// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/operationlog/remoteconfiglog/remote_config_log.proto

package remoteconfiglog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RemoteConfigLog_GetRemoteConfigLogList_FullMethodName = "/api.operationlog.remoteconfiglog.RemoteConfigLog/GetRemoteConfigLogList"
)

// RemoteConfigLogClient is the client API for RemoteConfigLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteConfigLogClient interface {
	// 1. 查询日志列表：GetLogList
	GetRemoteConfigLogList(ctx context.Context, in *GetRemoteConfigLogListReq, opts ...grpc.CallOption) (*GetRemoteConfigLogListRsp, error)
}

type remoteConfigLogClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConfigLogClient(cc grpc.ClientConnInterface) RemoteConfigLogClient {
	return &remoteConfigLogClient{cc}
}

func (c *remoteConfigLogClient) GetRemoteConfigLogList(ctx context.Context, in *GetRemoteConfigLogListReq, opts ...grpc.CallOption) (*GetRemoteConfigLogListRsp, error) {
	out := new(GetRemoteConfigLogListRsp)
	err := c.cc.Invoke(ctx, RemoteConfigLog_GetRemoteConfigLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConfigLogServer is the server API for RemoteConfigLog service.
// All implementations must embed UnimplementedRemoteConfigLogServer
// for forward compatibility
type RemoteConfigLogServer interface {
	// 1. 查询日志列表：GetLogList
	GetRemoteConfigLogList(context.Context, *GetRemoteConfigLogListReq) (*GetRemoteConfigLogListRsp, error)
	mustEmbedUnimplementedRemoteConfigLogServer()
}

// UnimplementedRemoteConfigLogServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteConfigLogServer struct {
}

func (UnimplementedRemoteConfigLogServer) GetRemoteConfigLogList(context.Context, *GetRemoteConfigLogListReq) (*GetRemoteConfigLogListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteConfigLogList not implemented")
}
func (UnimplementedRemoteConfigLogServer) mustEmbedUnimplementedRemoteConfigLogServer() {}

// UnsafeRemoteConfigLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteConfigLogServer will
// result in compilation errors.
type UnsafeRemoteConfigLogServer interface {
	mustEmbedUnimplementedRemoteConfigLogServer()
}

func RegisterRemoteConfigLogServer(s grpc.ServiceRegistrar, srv RemoteConfigLogServer) {
	s.RegisterService(&RemoteConfigLog_ServiceDesc, srv)
}

func _RemoteConfigLog_GetRemoteConfigLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteConfigLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigLogServer).GetRemoteConfigLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfigLog_GetRemoteConfigLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigLogServer).GetRemoteConfigLogList(ctx, req.(*GetRemoteConfigLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteConfigLog_ServiceDesc is the grpc.ServiceDesc for RemoteConfigLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteConfigLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.operationlog.remoteconfiglog.RemoteConfigLog",
	HandlerType: (*RemoteConfigLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemoteConfigLogList",
			Handler:    _RemoteConfigLog_GetRemoteConfigLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/operationlog/remoteconfiglog/remote_config_log.proto",
}
