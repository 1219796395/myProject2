// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/remoteconfig/remote_config.proto

package remoteconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RemoteConfig_GetRemoteConfigList_FullMethodName       = "/api.remoteconfig.RemoteConfig/GetRemoteConfigList"
	RemoteConfig_CreateRemoteConfig_FullMethodName        = "/api.remoteconfig.RemoteConfig/CreateRemoteConfig"
	RemoteConfig_CreateRemoteConfigV1_FullMethodName      = "/api.remoteconfig.RemoteConfig/CreateRemoteConfigV1"
	RemoteConfig_DeleteRemoteConfig_FullMethodName        = "/api.remoteconfig.RemoteConfig/DeleteRemoteConfig"
	RemoteConfig_UpdateRemoteConfig_FullMethodName        = "/api.remoteconfig.RemoteConfig/UpdateRemoteConfig"
	RemoteConfig_UpdateRemoteConfigV1_FullMethodName      = "/api.remoteconfig.RemoteConfig/UpdateRemoteConfigV1"
	RemoteConfig_PublishRemoteConfig_FullMethodName       = "/api.remoteconfig.RemoteConfig/PublishRemoteConfig"
	RemoteConfig_PublishRemoteConfigV1_FullMethodName     = "/api.remoteconfig.RemoteConfig/PublishRemoteConfigV1"
	RemoteConfig_CancelPublishRemoteConfig_FullMethodName = "/api.remoteconfig.RemoteConfig/CancelPublishRemoteConfig"
	RemoteConfig_GetRemoteConfig_FullMethodName           = "/api.remoteconfig.RemoteConfig/GetRemoteConfig"
	RemoteConfig_GetRemoteConfigV1_FullMethodName         = "/api.remoteconfig.RemoteConfig/GetRemoteConfigV1"
)

// RemoteConfigClient is the client API for RemoteConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteConfigClient interface {
	// 1. 获取远程配置列表：GetRemoteConfigList
	GetRemoteConfigList(ctx context.Context, in *GetRemoteConfigListReq, opts ...grpc.CallOption) (*GetRemoteConfigListRsp, error)
	// 2. 创建远程配置：CreateRemoteConfig
	CreateRemoteConfig(ctx context.Context, in *CreateRemoteConfigReq, opts ...grpc.CallOption) (*CreateRemoteConfigRsp, error)
	// 旧的创建远程配置：CreateRemoteConfig
	CreateRemoteConfigV1(ctx context.Context, in *CreateRemoteConfigV1Req, opts ...grpc.CallOption) (*CreateRemoteConfigRsp, error)
	// 3. 删除远程配置：DeleteRemoteConfig
	DeleteRemoteConfig(ctx context.Context, in *DeleteRemoteConfigReq, opts ...grpc.CallOption) (*DeleteRemoteConfigRsp, error)
	// 4. 修改远程配置：UpdateRemoteConfig
	UpdateRemoteConfig(ctx context.Context, in *UpdateRemoteConfigReq, opts ...grpc.CallOption) (*UpdateRemoteConfigRsp, error)
	// 旧的修改远程配置：UpdateRemoteConfig
	UpdateRemoteConfigV1(ctx context.Context, in *UpdateRemoteConfigV1Req, opts ...grpc.CallOption) (*UpdateRemoteConfigRsp, error)
	// 5. 发布远程配置：PublicRemoteConfig
	PublishRemoteConfig(ctx context.Context, in *PublishRemoteConfigReq, opts ...grpc.CallOption) (*PublishRemoteConfigRsp, error)
	// 旧的发布远程配置：PublicRemoteConfig
	PublishRemoteConfigV1(ctx context.Context, in *PublishRemoteConfigV1Req, opts ...grpc.CallOption) (*PublishRemoteConfigRsp, error)
	// 6. 取消发布远程配置：CancelPublishRemoteConfig
	CancelPublishRemoteConfig(ctx context.Context, in *CancelPublishRemoteConfigReq, opts ...grpc.CallOption) (*CancelPublishRemoteConfigRsp, error)
	// 7. C端公网获取单个远程配置：GetRemoteConfig
	GetRemoteConfig(ctx context.Context, in *GetRemoteConfigReq, opts ...grpc.CallOption) (*GetRemoteConfigRsp, error)
	// 旧C端公网获取单个远程配置：GetRemoteConfigV1
	GetRemoteConfigV1(ctx context.Context, in *GetRemoteConfigV1Req, opts ...grpc.CallOption) (*GetRemoteConfigRsp, error)
}

type remoteConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConfigClient(cc grpc.ClientConnInterface) RemoteConfigClient {
	return &remoteConfigClient{cc}
}

func (c *remoteConfigClient) GetRemoteConfigList(ctx context.Context, in *GetRemoteConfigListReq, opts ...grpc.CallOption) (*GetRemoteConfigListRsp, error) {
	out := new(GetRemoteConfigListRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_GetRemoteConfigList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) CreateRemoteConfig(ctx context.Context, in *CreateRemoteConfigReq, opts ...grpc.CallOption) (*CreateRemoteConfigRsp, error) {
	out := new(CreateRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_CreateRemoteConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) CreateRemoteConfigV1(ctx context.Context, in *CreateRemoteConfigV1Req, opts ...grpc.CallOption) (*CreateRemoteConfigRsp, error) {
	out := new(CreateRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_CreateRemoteConfigV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) DeleteRemoteConfig(ctx context.Context, in *DeleteRemoteConfigReq, opts ...grpc.CallOption) (*DeleteRemoteConfigRsp, error) {
	out := new(DeleteRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_DeleteRemoteConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) UpdateRemoteConfig(ctx context.Context, in *UpdateRemoteConfigReq, opts ...grpc.CallOption) (*UpdateRemoteConfigRsp, error) {
	out := new(UpdateRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_UpdateRemoteConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) UpdateRemoteConfigV1(ctx context.Context, in *UpdateRemoteConfigV1Req, opts ...grpc.CallOption) (*UpdateRemoteConfigRsp, error) {
	out := new(UpdateRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_UpdateRemoteConfigV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) PublishRemoteConfig(ctx context.Context, in *PublishRemoteConfigReq, opts ...grpc.CallOption) (*PublishRemoteConfigRsp, error) {
	out := new(PublishRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_PublishRemoteConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) PublishRemoteConfigV1(ctx context.Context, in *PublishRemoteConfigV1Req, opts ...grpc.CallOption) (*PublishRemoteConfigRsp, error) {
	out := new(PublishRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_PublishRemoteConfigV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) CancelPublishRemoteConfig(ctx context.Context, in *CancelPublishRemoteConfigReq, opts ...grpc.CallOption) (*CancelPublishRemoteConfigRsp, error) {
	out := new(CancelPublishRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_CancelPublishRemoteConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) GetRemoteConfig(ctx context.Context, in *GetRemoteConfigReq, opts ...grpc.CallOption) (*GetRemoteConfigRsp, error) {
	out := new(GetRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_GetRemoteConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) GetRemoteConfigV1(ctx context.Context, in *GetRemoteConfigV1Req, opts ...grpc.CallOption) (*GetRemoteConfigRsp, error) {
	out := new(GetRemoteConfigRsp)
	err := c.cc.Invoke(ctx, RemoteConfig_GetRemoteConfigV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConfigServer is the server API for RemoteConfig service.
// All implementations must embed UnimplementedRemoteConfigServer
// for forward compatibility
type RemoteConfigServer interface {
	// 1. 获取远程配置列表：GetRemoteConfigList
	GetRemoteConfigList(context.Context, *GetRemoteConfigListReq) (*GetRemoteConfigListRsp, error)
	// 2. 创建远程配置：CreateRemoteConfig
	CreateRemoteConfig(context.Context, *CreateRemoteConfigReq) (*CreateRemoteConfigRsp, error)
	// 旧的创建远程配置：CreateRemoteConfig
	CreateRemoteConfigV1(context.Context, *CreateRemoteConfigV1Req) (*CreateRemoteConfigRsp, error)
	// 3. 删除远程配置：DeleteRemoteConfig
	DeleteRemoteConfig(context.Context, *DeleteRemoteConfigReq) (*DeleteRemoteConfigRsp, error)
	// 4. 修改远程配置：UpdateRemoteConfig
	UpdateRemoteConfig(context.Context, *UpdateRemoteConfigReq) (*UpdateRemoteConfigRsp, error)
	// 旧的修改远程配置：UpdateRemoteConfig
	UpdateRemoteConfigV1(context.Context, *UpdateRemoteConfigV1Req) (*UpdateRemoteConfigRsp, error)
	// 5. 发布远程配置：PublicRemoteConfig
	PublishRemoteConfig(context.Context, *PublishRemoteConfigReq) (*PublishRemoteConfigRsp, error)
	// 旧的发布远程配置：PublicRemoteConfig
	PublishRemoteConfigV1(context.Context, *PublishRemoteConfigV1Req) (*PublishRemoteConfigRsp, error)
	// 6. 取消发布远程配置：CancelPublishRemoteConfig
	CancelPublishRemoteConfig(context.Context, *CancelPublishRemoteConfigReq) (*CancelPublishRemoteConfigRsp, error)
	// 7. C端公网获取单个远程配置：GetRemoteConfig
	GetRemoteConfig(context.Context, *GetRemoteConfigReq) (*GetRemoteConfigRsp, error)
	// 旧C端公网获取单个远程配置：GetRemoteConfigV1
	GetRemoteConfigV1(context.Context, *GetRemoteConfigV1Req) (*GetRemoteConfigRsp, error)
	mustEmbedUnimplementedRemoteConfigServer()
}

// UnimplementedRemoteConfigServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteConfigServer struct {
}

func (UnimplementedRemoteConfigServer) GetRemoteConfigList(context.Context, *GetRemoteConfigListReq) (*GetRemoteConfigListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteConfigList not implemented")
}
func (UnimplementedRemoteConfigServer) CreateRemoteConfig(context.Context, *CreateRemoteConfigReq) (*CreateRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemoteConfig not implemented")
}
func (UnimplementedRemoteConfigServer) CreateRemoteConfigV1(context.Context, *CreateRemoteConfigV1Req) (*CreateRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemoteConfigV1 not implemented")
}
func (UnimplementedRemoteConfigServer) DeleteRemoteConfig(context.Context, *DeleteRemoteConfigReq) (*DeleteRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemoteConfig not implemented")
}
func (UnimplementedRemoteConfigServer) UpdateRemoteConfig(context.Context, *UpdateRemoteConfigReq) (*UpdateRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemoteConfig not implemented")
}
func (UnimplementedRemoteConfigServer) UpdateRemoteConfigV1(context.Context, *UpdateRemoteConfigV1Req) (*UpdateRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemoteConfigV1 not implemented")
}
func (UnimplementedRemoteConfigServer) PublishRemoteConfig(context.Context, *PublishRemoteConfigReq) (*PublishRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishRemoteConfig not implemented")
}
func (UnimplementedRemoteConfigServer) PublishRemoteConfigV1(context.Context, *PublishRemoteConfigV1Req) (*PublishRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishRemoteConfigV1 not implemented")
}
func (UnimplementedRemoteConfigServer) CancelPublishRemoteConfig(context.Context, *CancelPublishRemoteConfigReq) (*CancelPublishRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPublishRemoteConfig not implemented")
}
func (UnimplementedRemoteConfigServer) GetRemoteConfig(context.Context, *GetRemoteConfigReq) (*GetRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteConfig not implemented")
}
func (UnimplementedRemoteConfigServer) GetRemoteConfigV1(context.Context, *GetRemoteConfigV1Req) (*GetRemoteConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteConfigV1 not implemented")
}
func (UnimplementedRemoteConfigServer) mustEmbedUnimplementedRemoteConfigServer() {}

// UnsafeRemoteConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteConfigServer will
// result in compilation errors.
type UnsafeRemoteConfigServer interface {
	mustEmbedUnimplementedRemoteConfigServer()
}

func RegisterRemoteConfigServer(s grpc.ServiceRegistrar, srv RemoteConfigServer) {
	s.RegisterService(&RemoteConfig_ServiceDesc, srv)
}

func _RemoteConfig_GetRemoteConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).GetRemoteConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_GetRemoteConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).GetRemoteConfigList(ctx, req.(*GetRemoteConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_CreateRemoteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemoteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).CreateRemoteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_CreateRemoteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).CreateRemoteConfig(ctx, req.(*CreateRemoteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_CreateRemoteConfigV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemoteConfigV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).CreateRemoteConfigV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_CreateRemoteConfigV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).CreateRemoteConfigV1(ctx, req.(*CreateRemoteConfigV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_DeleteRemoteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemoteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).DeleteRemoteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_DeleteRemoteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).DeleteRemoteConfig(ctx, req.(*DeleteRemoteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_UpdateRemoteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemoteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).UpdateRemoteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_UpdateRemoteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).UpdateRemoteConfig(ctx, req.(*UpdateRemoteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_UpdateRemoteConfigV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemoteConfigV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).UpdateRemoteConfigV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_UpdateRemoteConfigV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).UpdateRemoteConfigV1(ctx, req.(*UpdateRemoteConfigV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_PublishRemoteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRemoteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).PublishRemoteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_PublishRemoteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).PublishRemoteConfig(ctx, req.(*PublishRemoteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_PublishRemoteConfigV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRemoteConfigV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).PublishRemoteConfigV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_PublishRemoteConfigV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).PublishRemoteConfigV1(ctx, req.(*PublishRemoteConfigV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_CancelPublishRemoteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPublishRemoteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).CancelPublishRemoteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_CancelPublishRemoteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).CancelPublishRemoteConfig(ctx, req.(*CancelPublishRemoteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_GetRemoteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).GetRemoteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_GetRemoteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).GetRemoteConfig(ctx, req.(*GetRemoteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_GetRemoteConfigV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteConfigV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).GetRemoteConfigV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_GetRemoteConfigV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).GetRemoteConfigV1(ctx, req.(*GetRemoteConfigV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteConfig_ServiceDesc is the grpc.ServiceDesc for RemoteConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.remoteconfig.RemoteConfig",
	HandlerType: (*RemoteConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemoteConfigList",
			Handler:    _RemoteConfig_GetRemoteConfigList_Handler,
		},
		{
			MethodName: "CreateRemoteConfig",
			Handler:    _RemoteConfig_CreateRemoteConfig_Handler,
		},
		{
			MethodName: "CreateRemoteConfigV1",
			Handler:    _RemoteConfig_CreateRemoteConfigV1_Handler,
		},
		{
			MethodName: "DeleteRemoteConfig",
			Handler:    _RemoteConfig_DeleteRemoteConfig_Handler,
		},
		{
			MethodName: "UpdateRemoteConfig",
			Handler:    _RemoteConfig_UpdateRemoteConfig_Handler,
		},
		{
			MethodName: "UpdateRemoteConfigV1",
			Handler:    _RemoteConfig_UpdateRemoteConfigV1_Handler,
		},
		{
			MethodName: "PublishRemoteConfig",
			Handler:    _RemoteConfig_PublishRemoteConfig_Handler,
		},
		{
			MethodName: "PublishRemoteConfigV1",
			Handler:    _RemoteConfig_PublishRemoteConfigV1_Handler,
		},
		{
			MethodName: "CancelPublishRemoteConfig",
			Handler:    _RemoteConfig_CancelPublishRemoteConfig_Handler,
		},
		{
			MethodName: "GetRemoteConfig",
			Handler:    _RemoteConfig_GetRemoteConfig_Handler,
		},
		{
			MethodName: "GetRemoteConfigV1",
			Handler:    _RemoteConfig_GetRemoteConfigV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/remoteconfig/remote_config.proto",
}
