// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: api/remoteconfig/remote_config.proto

package remoteconfig

import (
	common "github.com/1219796395/myProject2/api/common"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 远程配置状态，枚举值
type RemoteConfigState int32

const (
	RemoteConfigState_REMOTE_CONFIG_UNKNOWN         RemoteConfigState = 0 // 占位
	RemoteConfigState_REMOTE_CONFIG_NEVER_PUBLISHED RemoteConfigState = 1 // 未发布
	RemoteConfigState_REMOTE_CONFIG_WAIT_PUBLISH    RemoteConfigState = 2 // 待发布
	RemoteConfigState_REMOTE_CONFIG_ONLINE          RemoteConfigState = 3 // 已上线
	RemoteConfigState_REMOTE_CONFIG_DELETED         RemoteConfigState = 4 // 已删除，不会返回给前端，仅为数据库记录用
)

// Enum value maps for RemoteConfigState.
var (
	RemoteConfigState_name = map[int32]string{
		0: "REMOTE_CONFIG_UNKNOWN",
		1: "REMOTE_CONFIG_NEVER_PUBLISHED",
		2: "REMOTE_CONFIG_WAIT_PUBLISH",
		3: "REMOTE_CONFIG_ONLINE",
		4: "REMOTE_CONFIG_DELETED",
	}
	RemoteConfigState_value = map[string]int32{
		"REMOTE_CONFIG_UNKNOWN":         0,
		"REMOTE_CONFIG_NEVER_PUBLISHED": 1,
		"REMOTE_CONFIG_WAIT_PUBLISH":    2,
		"REMOTE_CONFIG_ONLINE":          3,
		"REMOTE_CONFIG_DELETED":         4,
	}
)

func (x RemoteConfigState) Enum() *RemoteConfigState {
	p := new(RemoteConfigState)
	*p = x
	return p
}

func (x RemoteConfigState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteConfigState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_remoteconfig_remote_config_proto_enumTypes[0].Descriptor()
}

func (RemoteConfigState) Type() protoreflect.EnumType {
	return &file_api_remoteconfig_remote_config_proto_enumTypes[0]
}

func (x RemoteConfigState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteConfigState.Descriptor instead.
func (RemoteConfigState) EnumDescriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{0}
}

// 1. 获取远程配置列表：GetRemoteConfigList
type GetRemoteConfigListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *common.Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Env        string         `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`               // 环境
	Channel    string         `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`       // 渠道
	Platform   string         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`     // 平台
	ConfigName string         `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"` // 配置名
}

func (x *GetRemoteConfigListReq) Reset() {
	*x = GetRemoteConfigListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteConfigListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteConfigListReq) ProtoMessage() {}

func (x *GetRemoteConfigListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteConfigListReq.ProtoReflect.Descriptor instead.
func (*GetRemoteConfigListReq) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{0}
}

func (x *GetRemoteConfigListReq) GetCommon() *common.Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetRemoteConfigListReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetRemoteConfigListReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetRemoteConfigListReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetRemoteConfigListReq) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type GetRemoteConfigListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteConfigs []*RemoteConfigDetail `protobuf:"bytes,1,rep,name=remoteConfigs,proto3" json:"remoteConfigs,omitempty"` // 远程配置列表
}

func (x *GetRemoteConfigListRsp) Reset() {
	*x = GetRemoteConfigListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteConfigListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteConfigListRsp) ProtoMessage() {}

func (x *GetRemoteConfigListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteConfigListRsp.ProtoReflect.Descriptor instead.
func (*GetRemoteConfigListRsp) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{1}
}

func (x *GetRemoteConfigListRsp) GetRemoteConfigs() []*RemoteConfigDetail {
	if x != nil {
		return x.RemoteConfigs
	}
	return nil
}

type RemoteConfigDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`                            // 游戏分配的id
	Env             string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                                 // 环境
	Channel         string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`                         // 渠道
	Platform        string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`                       // 平台
	Name            string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                               // 配置名
	State           uint32 `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`                            // 配置状态，1:未发布，2:待发布，3：已上线，(4:已删除，不暴露给前端)
	Data            string `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`                               // 在线配置信息，json格式
	ModifyData      string `protobuf:"bytes,8,opt,name=modify_data,json=modifyData,proto3" json:"modify_data,omitempty"` // 草稿配置信息，json格式
	NotDistChannel  int32  `protobuf:"varint,9,opt,name=notDistChannel,proto3" json:"notDistChannel,omitempty"`          // 不区分渠道，0表示区分，1表示不区分
	NotDistPlatform int32  `protobuf:"varint,10,opt,name=notDistPlatform,proto3" json:"notDistPlatform,omitempty"`       // 不区分平台，0表示区分，1表示不区分
	Operator        string `protobuf:"bytes,11,opt,name=operator,proto3" json:"operator,omitempty"`                      // 操作人
	UpdateTime      uint64 `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                 //  修改时间
}

func (x *RemoteConfigDetail) Reset() {
	*x = RemoteConfigDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigDetail) ProtoMessage() {}

func (x *RemoteConfigDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigDetail.ProtoReflect.Descriptor instead.
func (*RemoteConfigDetail) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{2}
}

func (x *RemoteConfigDetail) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RemoteConfigDetail) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *RemoteConfigDetail) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *RemoteConfigDetail) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RemoteConfigDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteConfigDetail) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RemoteConfigDetail) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RemoteConfigDetail) GetModifyData() string {
	if x != nil {
		return x.ModifyData
	}
	return ""
}

func (x *RemoteConfigDetail) GetNotDistChannel() int32 {
	if x != nil {
		return x.NotDistChannel
	}
	return 0
}

func (x *RemoteConfigDetail) GetNotDistPlatform() int32 {
	if x != nil {
		return x.NotDistPlatform
	}
	return 0
}

func (x *RemoteConfigDetail) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *RemoteConfigDetail) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 2. 创建远程配置：CreateRemoteConfig
type CreateRemoteConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common          *common.Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Env             string         `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                          // 环境
	Channel         string         `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`                  // 渠道
	Platform        string         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`                // 平台
	ConfigName      string         `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"`            // 配置名
	ConfigData      string         `protobuf:"bytes,6,opt,name=configData,proto3" json:"configData,omitempty"`            // 配置信息，json格式
	NotDistChannel  int32          `protobuf:"varint,7,opt,name=notDistChannel,proto3" json:"notDistChannel,omitempty"`   // 不区分渠道，0表示区分，1表示不区分
	NotDistPlatform int32          `protobuf:"varint,8,opt,name=notDistPlatform,proto3" json:"notDistPlatform,omitempty"` // 不区分平台，0表示区分，1表示不区分
}

func (x *CreateRemoteConfigReq) Reset() {
	*x = CreateRemoteConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoteConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoteConfigReq) ProtoMessage() {}

func (x *CreateRemoteConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoteConfigReq.ProtoReflect.Descriptor instead.
func (*CreateRemoteConfigReq) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRemoteConfigReq) GetCommon() *common.Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CreateRemoteConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CreateRemoteConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CreateRemoteConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CreateRemoteConfigReq) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *CreateRemoteConfigReq) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

func (x *CreateRemoteConfigReq) GetNotDistChannel() int32 {
	if x != nil {
		return x.NotDistChannel
	}
	return 0
}

func (x *CreateRemoteConfigReq) GetNotDistPlatform() int32 {
	if x != nil {
		return x.NotDistPlatform
	}
	return 0
}

type CreateRemoteConfigV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      uint32 `protobuf:"varint,1,opt,name=appid,proto3" json:"appid,omitempty"`          // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`               // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`       // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`     // 平台
	ConfigName string `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"` // 配置名
	ConfigData string `protobuf:"bytes,6,opt,name=configData,proto3" json:"configData,omitempty"` // 配置信息，json格式
	Operator   string `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`     // 操作人
}

func (x *CreateRemoteConfigV1Req) Reset() {
	*x = CreateRemoteConfigV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoteConfigV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoteConfigV1Req) ProtoMessage() {}

func (x *CreateRemoteConfigV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoteConfigV1Req.ProtoReflect.Descriptor instead.
func (*CreateRemoteConfigV1Req) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRemoteConfigV1Req) GetAppid() uint32 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *CreateRemoteConfigV1Req) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CreateRemoteConfigV1Req) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CreateRemoteConfigV1Req) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CreateRemoteConfigV1Req) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *CreateRemoteConfigV1Req) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

func (x *CreateRemoteConfigV1Req) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type CreateRemoteConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateRemoteConfigRsp) Reset() {
	*x = CreateRemoteConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoteConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoteConfigRsp) ProtoMessage() {}

func (x *CreateRemoteConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoteConfigRsp.ProtoReflect.Descriptor instead.
func (*CreateRemoteConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{5}
}

// 3.删除远程配置：DeleteRemoteConfig
type DeleteRemoteConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *common.Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Env        string         `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string         `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	ConfigName string         `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"`  // 配置名
	UpdateTime uint64         `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *DeleteRemoteConfigReq) Reset() {
	*x = DeleteRemoteConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemoteConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteConfigReq) ProtoMessage() {}

func (x *DeleteRemoteConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteConfigReq.ProtoReflect.Descriptor instead.
func (*DeleteRemoteConfigReq) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRemoteConfigReq) GetCommon() *common.Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *DeleteRemoteConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *DeleteRemoteConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *DeleteRemoteConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeleteRemoteConfigReq) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *DeleteRemoteConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type DeleteRemoteConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRemoteConfigRsp) Reset() {
	*x = DeleteRemoteConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemoteConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteConfigRsp) ProtoMessage() {}

func (x *DeleteRemoteConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteConfigRsp.ProtoReflect.Descriptor instead.
func (*DeleteRemoteConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{7}
}

// 4. 修改远程配置：UpdateRemoteConfig
type UpdateRemoteConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *common.Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Env        string         `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string         `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	ConfigName string         `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"`  // 配置名
	ConfigData string         `protobuf:"bytes,6,opt,name=configData,proto3" json:"configData,omitempty"`  // 配置信息
	UpdateTime uint64         `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *UpdateRemoteConfigReq) Reset() {
	*x = UpdateRemoteConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRemoteConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemoteConfigReq) ProtoMessage() {}

func (x *UpdateRemoteConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemoteConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateRemoteConfigReq) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRemoteConfigReq) GetCommon() *common.Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *UpdateRemoteConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *UpdateRemoteConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpdateRemoteConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpdateRemoteConfigReq) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *UpdateRemoteConfigReq) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

func (x *UpdateRemoteConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpdateRemoteConfigV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      uint32 `protobuf:"varint,1,opt,name=appid,proto3" json:"appid,omitempty"`           // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	ConfigName string `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"`  // 配置名
	ConfigData string `protobuf:"bytes,6,opt,name=configData,proto3" json:"configData,omitempty"`  // 配置信息
	Operator   string `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`      // 操作人
	UpdateTime uint64 `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *UpdateRemoteConfigV1Req) Reset() {
	*x = UpdateRemoteConfigV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRemoteConfigV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemoteConfigV1Req) ProtoMessage() {}

func (x *UpdateRemoteConfigV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemoteConfigV1Req.ProtoReflect.Descriptor instead.
func (*UpdateRemoteConfigV1Req) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRemoteConfigV1Req) GetAppid() uint32 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *UpdateRemoteConfigV1Req) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *UpdateRemoteConfigV1Req) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpdateRemoteConfigV1Req) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpdateRemoteConfigV1Req) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *UpdateRemoteConfigV1Req) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

func (x *UpdateRemoteConfigV1Req) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UpdateRemoteConfigV1Req) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpdateRemoteConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRemoteConfigRsp) Reset() {
	*x = UpdateRemoteConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRemoteConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemoteConfigRsp) ProtoMessage() {}

func (x *UpdateRemoteConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemoteConfigRsp.ProtoReflect.Descriptor instead.
func (*UpdateRemoteConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{10}
}

// 5. 发布远程配置：PublishRemoteConfig
type PublishRemoteConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *common.Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Env        string         `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string         `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	ConfigName string         `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"`  // 配置名
	UpdateTime uint64         `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *PublishRemoteConfigReq) Reset() {
	*x = PublishRemoteConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRemoteConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRemoteConfigReq) ProtoMessage() {}

func (x *PublishRemoteConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRemoteConfigReq.ProtoReflect.Descriptor instead.
func (*PublishRemoteConfigReq) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{11}
}

func (x *PublishRemoteConfigReq) GetCommon() *common.Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *PublishRemoteConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *PublishRemoteConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PublishRemoteConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PublishRemoteConfigReq) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *PublishRemoteConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type PublishRemoteConfigV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      uint32 `protobuf:"varint,1,opt,name=appid,proto3" json:"appid,omitempty"`           // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	ConfigName string `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"`  // 配置名
	Operator   string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`      // 操作人
	UpdateTime uint64 `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *PublishRemoteConfigV1Req) Reset() {
	*x = PublishRemoteConfigV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRemoteConfigV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRemoteConfigV1Req) ProtoMessage() {}

func (x *PublishRemoteConfigV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRemoteConfigV1Req.ProtoReflect.Descriptor instead.
func (*PublishRemoteConfigV1Req) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{12}
}

func (x *PublishRemoteConfigV1Req) GetAppid() uint32 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *PublishRemoteConfigV1Req) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *PublishRemoteConfigV1Req) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PublishRemoteConfigV1Req) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PublishRemoteConfigV1Req) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *PublishRemoteConfigV1Req) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PublishRemoteConfigV1Req) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type PublishRemoteConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishRemoteConfigRsp) Reset() {
	*x = PublishRemoteConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRemoteConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRemoteConfigRsp) ProtoMessage() {}

func (x *PublishRemoteConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRemoteConfigRsp.ProtoReflect.Descriptor instead.
func (*PublishRemoteConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{13}
}

// 6. 取消发布远程配置：CancelPublishRemoteConfig
type CancelPublishRemoteConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *common.Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Env        string         `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string         `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	ConfigName string         `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"`  // 配置名
	UpdateTime uint64         `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"` // 该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *CancelPublishRemoteConfigReq) Reset() {
	*x = CancelPublishRemoteConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPublishRemoteConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPublishRemoteConfigReq) ProtoMessage() {}

func (x *CancelPublishRemoteConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPublishRemoteConfigReq.ProtoReflect.Descriptor instead.
func (*CancelPublishRemoteConfigReq) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{14}
}

func (x *CancelPublishRemoteConfigReq) GetCommon() *common.Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CancelPublishRemoteConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CancelPublishRemoteConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CancelPublishRemoteConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CancelPublishRemoteConfigReq) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *CancelPublishRemoteConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CancelPublishRemoteConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelPublishRemoteConfigRsp) Reset() {
	*x = CancelPublishRemoteConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPublishRemoteConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPublishRemoteConfigRsp) ProtoMessage() {}

func (x *CancelPublishRemoteConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPublishRemoteConfigRsp.ProtoReflect.Descriptor instead.
func (*CancelPublishRemoteConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{15}
}

// 7. C端公网获取单个远程配置：GetRemoteConfig
type GetRemoteConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`          // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`               // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`       // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`     // 平台
	ConfigName string `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"` // 配置名
}

func (x *GetRemoteConfigReq) Reset() {
	*x = GetRemoteConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteConfigReq) ProtoMessage() {}

func (x *GetRemoteConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteConfigReq.ProtoReflect.Descriptor instead.
func (*GetRemoteConfigReq) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{16}
}

func (x *GetRemoteConfigReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetRemoteConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetRemoteConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetRemoteConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetRemoteConfigReq) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type GetRemoteConfigV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      uint32 `protobuf:"varint,1,opt,name=appid,proto3" json:"appid,omitempty"`          // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`               // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`       // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`     // 平台
	ConfigName string `protobuf:"bytes,5,opt,name=configName,proto3" json:"configName,omitempty"` // 配置名
}

func (x *GetRemoteConfigV1Req) Reset() {
	*x = GetRemoteConfigV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteConfigV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteConfigV1Req) ProtoMessage() {}

func (x *GetRemoteConfigV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteConfigV1Req.ProtoReflect.Descriptor instead.
func (*GetRemoteConfigV1Req) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{17}
}

func (x *GetRemoteConfigV1Req) GetAppid() uint32 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *GetRemoteConfigV1Req) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetRemoteConfigV1Req) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetRemoteConfigV1Req) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetRemoteConfigV1Req) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type GetRemoteConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigData string `protobuf:"bytes,1,opt,name=configData,proto3" json:"configData,omitempty"` // 配置信息，默认json格式，终端自行反序列化
}

func (x *GetRemoteConfigRsp) Reset() {
	*x = GetRemoteConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_remoteconfig_remote_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteConfigRsp) ProtoMessage() {}

func (x *GetRemoteConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_remoteconfig_remote_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteConfigRsp.ProtoReflect.Descriptor instead.
func (*GetRemoteConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_remoteconfig_remote_config_proto_rawDescGZIP(), []int{18}
}

func (x *GetRemoteConfigRsp) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

var File_api_remoteconfig_remote_config_proto protoreflect.FileDescriptor

var file_api_remoteconfig_remote_config_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x64, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x6e,
	0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x73, 0x70, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x73, 0x70, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x73, 0x70, 0x22, 0xdc, 0x01, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x73, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x34, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x2a, 0xa6, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0x93,
	0x10, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xb6, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x65,
	0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73,
	0x70, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x01, 0x2a, 0x22, 0x4b, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x7d, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x31, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01,
	0x2a, 0x22, 0x29, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbb, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x2a, 0x4b, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x7d, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x73, 0x70, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x01, 0x2a, 0x1a, 0x4b,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x31, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xc9,
	0x01, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x58, 0x3a, 0x01, 0x2a, 0x1a, 0x53, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x7d, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x31, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0xe2, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5f, 0x3a, 0x01, 0x2a, 0x1a, 0x5a, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2f,
	0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x7b,
	0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x2f, 0x7b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d,
	0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0xbf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x12, 0x54,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x65, 0x6e,
	0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x31, 0x32, 0x31, 0x39, 0x37, 0x39, 0x36, 0x33, 0x39, 0x35, 0x2f, 0x6d, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_remoteconfig_remote_config_proto_rawDescOnce sync.Once
	file_api_remoteconfig_remote_config_proto_rawDescData = file_api_remoteconfig_remote_config_proto_rawDesc
)

func file_api_remoteconfig_remote_config_proto_rawDescGZIP() []byte {
	file_api_remoteconfig_remote_config_proto_rawDescOnce.Do(func() {
		file_api_remoteconfig_remote_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_remoteconfig_remote_config_proto_rawDescData)
	})
	return file_api_remoteconfig_remote_config_proto_rawDescData
}

var file_api_remoteconfig_remote_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_remoteconfig_remote_config_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_api_remoteconfig_remote_config_proto_goTypes = []interface{}{
	(RemoteConfigState)(0),               // 0: api.remoteconfig.RemoteConfigState
	(*GetRemoteConfigListReq)(nil),       // 1: api.remoteconfig.GetRemoteConfigListReq
	(*GetRemoteConfigListRsp)(nil),       // 2: api.remoteconfig.GetRemoteConfigListRsp
	(*RemoteConfigDetail)(nil),           // 3: api.remoteconfig.RemoteConfigDetail
	(*CreateRemoteConfigReq)(nil),        // 4: api.remoteconfig.CreateRemoteConfigReq
	(*CreateRemoteConfigV1Req)(nil),      // 5: api.remoteconfig.CreateRemoteConfigV1Req
	(*CreateRemoteConfigRsp)(nil),        // 6: api.remoteconfig.CreateRemoteConfigRsp
	(*DeleteRemoteConfigReq)(nil),        // 7: api.remoteconfig.DeleteRemoteConfigReq
	(*DeleteRemoteConfigRsp)(nil),        // 8: api.remoteconfig.DeleteRemoteConfigRsp
	(*UpdateRemoteConfigReq)(nil),        // 9: api.remoteconfig.UpdateRemoteConfigReq
	(*UpdateRemoteConfigV1Req)(nil),      // 10: api.remoteconfig.UpdateRemoteConfigV1Req
	(*UpdateRemoteConfigRsp)(nil),        // 11: api.remoteconfig.UpdateRemoteConfigRsp
	(*PublishRemoteConfigReq)(nil),       // 12: api.remoteconfig.PublishRemoteConfigReq
	(*PublishRemoteConfigV1Req)(nil),     // 13: api.remoteconfig.PublishRemoteConfigV1Req
	(*PublishRemoteConfigRsp)(nil),       // 14: api.remoteconfig.PublishRemoteConfigRsp
	(*CancelPublishRemoteConfigReq)(nil), // 15: api.remoteconfig.CancelPublishRemoteConfigReq
	(*CancelPublishRemoteConfigRsp)(nil), // 16: api.remoteconfig.CancelPublishRemoteConfigRsp
	(*GetRemoteConfigReq)(nil),           // 17: api.remoteconfig.GetRemoteConfigReq
	(*GetRemoteConfigV1Req)(nil),         // 18: api.remoteconfig.GetRemoteConfigV1Req
	(*GetRemoteConfigRsp)(nil),           // 19: api.remoteconfig.GetRemoteConfigRsp
	(*common.Common)(nil),                // 20: api.common.Common
}
var file_api_remoteconfig_remote_config_proto_depIdxs = []int32{
	20, // 0: api.remoteconfig.GetRemoteConfigListReq.common:type_name -> api.common.Common
	3,  // 1: api.remoteconfig.GetRemoteConfigListRsp.remoteConfigs:type_name -> api.remoteconfig.RemoteConfigDetail
	20, // 2: api.remoteconfig.CreateRemoteConfigReq.common:type_name -> api.common.Common
	20, // 3: api.remoteconfig.DeleteRemoteConfigReq.common:type_name -> api.common.Common
	20, // 4: api.remoteconfig.UpdateRemoteConfigReq.common:type_name -> api.common.Common
	20, // 5: api.remoteconfig.PublishRemoteConfigReq.common:type_name -> api.common.Common
	20, // 6: api.remoteconfig.CancelPublishRemoteConfigReq.common:type_name -> api.common.Common
	1,  // 7: api.remoteconfig.RemoteConfig.GetRemoteConfigList:input_type -> api.remoteconfig.GetRemoteConfigListReq
	4,  // 8: api.remoteconfig.RemoteConfig.CreateRemoteConfig:input_type -> api.remoteconfig.CreateRemoteConfigReq
	5,  // 9: api.remoteconfig.RemoteConfig.CreateRemoteConfigV1:input_type -> api.remoteconfig.CreateRemoteConfigV1Req
	7,  // 10: api.remoteconfig.RemoteConfig.DeleteRemoteConfig:input_type -> api.remoteconfig.DeleteRemoteConfigReq
	9,  // 11: api.remoteconfig.RemoteConfig.UpdateRemoteConfig:input_type -> api.remoteconfig.UpdateRemoteConfigReq
	10, // 12: api.remoteconfig.RemoteConfig.UpdateRemoteConfigV1:input_type -> api.remoteconfig.UpdateRemoteConfigV1Req
	12, // 13: api.remoteconfig.RemoteConfig.PublishRemoteConfig:input_type -> api.remoteconfig.PublishRemoteConfigReq
	13, // 14: api.remoteconfig.RemoteConfig.PublishRemoteConfigV1:input_type -> api.remoteconfig.PublishRemoteConfigV1Req
	15, // 15: api.remoteconfig.RemoteConfig.CancelPublishRemoteConfig:input_type -> api.remoteconfig.CancelPublishRemoteConfigReq
	17, // 16: api.remoteconfig.RemoteConfig.GetRemoteConfig:input_type -> api.remoteconfig.GetRemoteConfigReq
	18, // 17: api.remoteconfig.RemoteConfig.GetRemoteConfigV1:input_type -> api.remoteconfig.GetRemoteConfigV1Req
	2,  // 18: api.remoteconfig.RemoteConfig.GetRemoteConfigList:output_type -> api.remoteconfig.GetRemoteConfigListRsp
	6,  // 19: api.remoteconfig.RemoteConfig.CreateRemoteConfig:output_type -> api.remoteconfig.CreateRemoteConfigRsp
	6,  // 20: api.remoteconfig.RemoteConfig.CreateRemoteConfigV1:output_type -> api.remoteconfig.CreateRemoteConfigRsp
	8,  // 21: api.remoteconfig.RemoteConfig.DeleteRemoteConfig:output_type -> api.remoteconfig.DeleteRemoteConfigRsp
	11, // 22: api.remoteconfig.RemoteConfig.UpdateRemoteConfig:output_type -> api.remoteconfig.UpdateRemoteConfigRsp
	11, // 23: api.remoteconfig.RemoteConfig.UpdateRemoteConfigV1:output_type -> api.remoteconfig.UpdateRemoteConfigRsp
	14, // 24: api.remoteconfig.RemoteConfig.PublishRemoteConfig:output_type -> api.remoteconfig.PublishRemoteConfigRsp
	14, // 25: api.remoteconfig.RemoteConfig.PublishRemoteConfigV1:output_type -> api.remoteconfig.PublishRemoteConfigRsp
	16, // 26: api.remoteconfig.RemoteConfig.CancelPublishRemoteConfig:output_type -> api.remoteconfig.CancelPublishRemoteConfigRsp
	19, // 27: api.remoteconfig.RemoteConfig.GetRemoteConfig:output_type -> api.remoteconfig.GetRemoteConfigRsp
	19, // 28: api.remoteconfig.RemoteConfig.GetRemoteConfigV1:output_type -> api.remoteconfig.GetRemoteConfigRsp
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_api_remoteconfig_remote_config_proto_init() }
func file_api_remoteconfig_remote_config_proto_init() {
	if File_api_remoteconfig_remote_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_remoteconfig_remote_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteConfigListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteConfigListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoteConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoteConfigV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoteConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemoteConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemoteConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRemoteConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRemoteConfigV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRemoteConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRemoteConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRemoteConfigV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRemoteConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPublishRemoteConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPublishRemoteConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteConfigV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_remoteconfig_remote_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_remoteconfig_remote_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_remoteconfig_remote_config_proto_goTypes,
		DependencyIndexes: file_api_remoteconfig_remote_config_proto_depIdxs,
		EnumInfos:         file_api_remoteconfig_remote_config_proto_enumTypes,
		MessageInfos:      file_api_remoteconfig_remote_config_proto_msgTypes,
	}.Build()
	File_api_remoteconfig_remote_config_proto = out.File
	file_api_remoteconfig_remote_config_proto_rawDesc = nil
	file_api_remoteconfig_remote_config_proto_goTypes = nil
	file_api_remoteconfig_remote_config_proto_depIdxs = nil
}
