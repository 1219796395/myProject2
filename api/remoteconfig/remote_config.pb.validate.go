// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/remoteconfig/remote_config.proto

package remoteconfig

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRemoteConfigListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemoteConfigListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemoteConfigListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRemoteConfigListReqMultiError, or nil if none found.
func (m *GetRemoteConfigListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemoteConfigListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := GetRemoteConfigListReqValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRemoteConfigListReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRemoteConfigListReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRemoteConfigListReqValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	if len(errors) > 0 {
		return GetRemoteConfigListReqMultiError(errors)
	}

	return nil
}

// GetRemoteConfigListReqMultiError is an error wrapping multiple validation
// errors returned by GetRemoteConfigListReq.ValidateAll() if the designated
// constraints aren't met.
type GetRemoteConfigListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemoteConfigListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemoteConfigListReqMultiError) AllErrors() []error { return m }

// GetRemoteConfigListReqValidationError is the validation error returned by
// GetRemoteConfigListReq.Validate if the designated constraints aren't met.
type GetRemoteConfigListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemoteConfigListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemoteConfigListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemoteConfigListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemoteConfigListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemoteConfigListReqValidationError) ErrorName() string {
	return "GetRemoteConfigListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemoteConfigListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemoteConfigListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemoteConfigListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemoteConfigListReqValidationError{}

// Validate checks the field values on GetRemoteConfigListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemoteConfigListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemoteConfigListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRemoteConfigListRspMultiError, or nil if none found.
func (m *GetRemoteConfigListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemoteConfigListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRemoteConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRemoteConfigListRspValidationError{
						field:  fmt.Sprintf("RemoteConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRemoteConfigListRspValidationError{
						field:  fmt.Sprintf("RemoteConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRemoteConfigListRspValidationError{
					field:  fmt.Sprintf("RemoteConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRemoteConfigListRspMultiError(errors)
	}

	return nil
}

// GetRemoteConfigListRspMultiError is an error wrapping multiple validation
// errors returned by GetRemoteConfigListRsp.ValidateAll() if the designated
// constraints aren't met.
type GetRemoteConfigListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemoteConfigListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemoteConfigListRspMultiError) AllErrors() []error { return m }

// GetRemoteConfigListRspValidationError is the validation error returned by
// GetRemoteConfigListRsp.Validate if the designated constraints aren't met.
type GetRemoteConfigListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemoteConfigListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemoteConfigListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemoteConfigListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemoteConfigListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemoteConfigListRspValidationError) ErrorName() string {
	return "GetRemoteConfigListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemoteConfigListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemoteConfigListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemoteConfigListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemoteConfigListRspValidationError{}

// Validate checks the field values on RemoteConfigDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoteConfigDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoteConfigDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoteConfigDetailMultiError, or nil if none found.
func (m *RemoteConfigDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoteConfigDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for Name

	// no validation rules for State

	// no validation rules for Data

	// no validation rules for ModifyData

	// no validation rules for Operator

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return RemoteConfigDetailMultiError(errors)
	}

	return nil
}

// RemoteConfigDetailMultiError is an error wrapping multiple validation errors
// returned by RemoteConfigDetail.ValidateAll() if the designated constraints
// aren't met.
type RemoteConfigDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoteConfigDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoteConfigDetailMultiError) AllErrors() []error { return m }

// RemoteConfigDetailValidationError is the validation error returned by
// RemoteConfigDetail.Validate if the designated constraints aren't met.
type RemoteConfigDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoteConfigDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoteConfigDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoteConfigDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoteConfigDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoteConfigDetailValidationError) ErrorName() string {
	return "RemoteConfigDetailValidationError"
}

// Error satisfies the builtin error interface
func (e RemoteConfigDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoteConfigDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoteConfigDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoteConfigDetailValidationError{}

// Validate checks the field values on CreateRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRemoteConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRemoteConfigReqMultiError, or nil if none found.
func (m *CreateRemoteConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRemoteConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := CreateRemoteConfigReqValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRemoteConfigReqValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for ConfigData

	if len(errors) > 0 {
		return CreateRemoteConfigReqMultiError(errors)
	}

	return nil
}

// CreateRemoteConfigReqMultiError is an error wrapping multiple validation
// errors returned by CreateRemoteConfigReq.ValidateAll() if the designated
// constraints aren't met.
type CreateRemoteConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRemoteConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRemoteConfigReqMultiError) AllErrors() []error { return m }

// CreateRemoteConfigReqValidationError is the validation error returned by
// CreateRemoteConfigReq.Validate if the designated constraints aren't met.
type CreateRemoteConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRemoteConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRemoteConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRemoteConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRemoteConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRemoteConfigReqValidationError) ErrorName() string {
	return "CreateRemoteConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRemoteConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRemoteConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRemoteConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRemoteConfigReqValidationError{}

// Validate checks the field values on CreateRemoteConfigV1Req with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRemoteConfigV1Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRemoteConfigV1Req with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRemoteConfigV1ReqMultiError, or nil if none found.
func (m *CreateRemoteConfigV1Req) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRemoteConfigV1Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Appid

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for ConfigData

	// no validation rules for Operator

	if len(errors) > 0 {
		return CreateRemoteConfigV1ReqMultiError(errors)
	}

	return nil
}

// CreateRemoteConfigV1ReqMultiError is an error wrapping multiple validation
// errors returned by CreateRemoteConfigV1Req.ValidateAll() if the designated
// constraints aren't met.
type CreateRemoteConfigV1ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRemoteConfigV1ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRemoteConfigV1ReqMultiError) AllErrors() []error { return m }

// CreateRemoteConfigV1ReqValidationError is the validation error returned by
// CreateRemoteConfigV1Req.Validate if the designated constraints aren't met.
type CreateRemoteConfigV1ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRemoteConfigV1ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRemoteConfigV1ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRemoteConfigV1ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRemoteConfigV1ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRemoteConfigV1ReqValidationError) ErrorName() string {
	return "CreateRemoteConfigV1ReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRemoteConfigV1ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRemoteConfigV1Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRemoteConfigV1ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRemoteConfigV1ReqValidationError{}

// Validate checks the field values on CreateRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRemoteConfigRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRemoteConfigRspMultiError, or nil if none found.
func (m *CreateRemoteConfigRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRemoteConfigRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRemoteConfigRspMultiError(errors)
	}

	return nil
}

// CreateRemoteConfigRspMultiError is an error wrapping multiple validation
// errors returned by CreateRemoteConfigRsp.ValidateAll() if the designated
// constraints aren't met.
type CreateRemoteConfigRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRemoteConfigRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRemoteConfigRspMultiError) AllErrors() []error { return m }

// CreateRemoteConfigRspValidationError is the validation error returned by
// CreateRemoteConfigRsp.Validate if the designated constraints aren't met.
type CreateRemoteConfigRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRemoteConfigRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRemoteConfigRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRemoteConfigRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRemoteConfigRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRemoteConfigRspValidationError) ErrorName() string {
	return "CreateRemoteConfigRspValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRemoteConfigRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRemoteConfigRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRemoteConfigRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRemoteConfigRspValidationError{}

// Validate checks the field values on DeleteRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRemoteConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRemoteConfigReqMultiError, or nil if none found.
func (m *DeleteRemoteConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRemoteConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := DeleteRemoteConfigReqValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRemoteConfigReqValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return DeleteRemoteConfigReqMultiError(errors)
	}

	return nil
}

// DeleteRemoteConfigReqMultiError is an error wrapping multiple validation
// errors returned by DeleteRemoteConfigReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteRemoteConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRemoteConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRemoteConfigReqMultiError) AllErrors() []error { return m }

// DeleteRemoteConfigReqValidationError is the validation error returned by
// DeleteRemoteConfigReq.Validate if the designated constraints aren't met.
type DeleteRemoteConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRemoteConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRemoteConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRemoteConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRemoteConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRemoteConfigReqValidationError) ErrorName() string {
	return "DeleteRemoteConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRemoteConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRemoteConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRemoteConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRemoteConfigReqValidationError{}

// Validate checks the field values on DeleteRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRemoteConfigRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRemoteConfigRspMultiError, or nil if none found.
func (m *DeleteRemoteConfigRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRemoteConfigRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRemoteConfigRspMultiError(errors)
	}

	return nil
}

// DeleteRemoteConfigRspMultiError is an error wrapping multiple validation
// errors returned by DeleteRemoteConfigRsp.ValidateAll() if the designated
// constraints aren't met.
type DeleteRemoteConfigRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRemoteConfigRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRemoteConfigRspMultiError) AllErrors() []error { return m }

// DeleteRemoteConfigRspValidationError is the validation error returned by
// DeleteRemoteConfigRsp.Validate if the designated constraints aren't met.
type DeleteRemoteConfigRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRemoteConfigRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRemoteConfigRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRemoteConfigRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRemoteConfigRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRemoteConfigRspValidationError) ErrorName() string {
	return "DeleteRemoteConfigRspValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRemoteConfigRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRemoteConfigRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRemoteConfigRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRemoteConfigRspValidationError{}

// Validate checks the field values on UpdateRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRemoteConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRemoteConfigReqMultiError, or nil if none found.
func (m *UpdateRemoteConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRemoteConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := UpdateRemoteConfigReqValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRemoteConfigReqValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for ConfigData

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return UpdateRemoteConfigReqMultiError(errors)
	}

	return nil
}

// UpdateRemoteConfigReqMultiError is an error wrapping multiple validation
// errors returned by UpdateRemoteConfigReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateRemoteConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRemoteConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRemoteConfigReqMultiError) AllErrors() []error { return m }

// UpdateRemoteConfigReqValidationError is the validation error returned by
// UpdateRemoteConfigReq.Validate if the designated constraints aren't met.
type UpdateRemoteConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRemoteConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRemoteConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRemoteConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRemoteConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRemoteConfigReqValidationError) ErrorName() string {
	return "UpdateRemoteConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRemoteConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRemoteConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRemoteConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRemoteConfigReqValidationError{}

// Validate checks the field values on UpdateRemoteConfigV1Req with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRemoteConfigV1Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRemoteConfigV1Req with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRemoteConfigV1ReqMultiError, or nil if none found.
func (m *UpdateRemoteConfigV1Req) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRemoteConfigV1Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Appid

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for ConfigData

	// no validation rules for Operator

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return UpdateRemoteConfigV1ReqMultiError(errors)
	}

	return nil
}

// UpdateRemoteConfigV1ReqMultiError is an error wrapping multiple validation
// errors returned by UpdateRemoteConfigV1Req.ValidateAll() if the designated
// constraints aren't met.
type UpdateRemoteConfigV1ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRemoteConfigV1ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRemoteConfigV1ReqMultiError) AllErrors() []error { return m }

// UpdateRemoteConfigV1ReqValidationError is the validation error returned by
// UpdateRemoteConfigV1Req.Validate if the designated constraints aren't met.
type UpdateRemoteConfigV1ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRemoteConfigV1ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRemoteConfigV1ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRemoteConfigV1ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRemoteConfigV1ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRemoteConfigV1ReqValidationError) ErrorName() string {
	return "UpdateRemoteConfigV1ReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRemoteConfigV1ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRemoteConfigV1Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRemoteConfigV1ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRemoteConfigV1ReqValidationError{}

// Validate checks the field values on UpdateRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRemoteConfigRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRemoteConfigRspMultiError, or nil if none found.
func (m *UpdateRemoteConfigRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRemoteConfigRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRemoteConfigRspMultiError(errors)
	}

	return nil
}

// UpdateRemoteConfigRspMultiError is an error wrapping multiple validation
// errors returned by UpdateRemoteConfigRsp.ValidateAll() if the designated
// constraints aren't met.
type UpdateRemoteConfigRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRemoteConfigRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRemoteConfigRspMultiError) AllErrors() []error { return m }

// UpdateRemoteConfigRspValidationError is the validation error returned by
// UpdateRemoteConfigRsp.Validate if the designated constraints aren't met.
type UpdateRemoteConfigRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRemoteConfigRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRemoteConfigRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRemoteConfigRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRemoteConfigRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRemoteConfigRspValidationError) ErrorName() string {
	return "UpdateRemoteConfigRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRemoteConfigRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRemoteConfigRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRemoteConfigRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRemoteConfigRspValidationError{}

// Validate checks the field values on PublishRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishRemoteConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishRemoteConfigReqMultiError, or nil if none found.
func (m *PublishRemoteConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishRemoteConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := PublishRemoteConfigReqValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishRemoteConfigReqValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return PublishRemoteConfigReqMultiError(errors)
	}

	return nil
}

// PublishRemoteConfigReqMultiError is an error wrapping multiple validation
// errors returned by PublishRemoteConfigReq.ValidateAll() if the designated
// constraints aren't met.
type PublishRemoteConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishRemoteConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishRemoteConfigReqMultiError) AllErrors() []error { return m }

// PublishRemoteConfigReqValidationError is the validation error returned by
// PublishRemoteConfigReq.Validate if the designated constraints aren't met.
type PublishRemoteConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishRemoteConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishRemoteConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishRemoteConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishRemoteConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishRemoteConfigReqValidationError) ErrorName() string {
	return "PublishRemoteConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e PublishRemoteConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishRemoteConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishRemoteConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishRemoteConfigReqValidationError{}

// Validate checks the field values on PublishRemoteConfigV1Req with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishRemoteConfigV1Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishRemoteConfigV1Req with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishRemoteConfigV1ReqMultiError, or nil if none found.
func (m *PublishRemoteConfigV1Req) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishRemoteConfigV1Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Appid

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for Operator

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return PublishRemoteConfigV1ReqMultiError(errors)
	}

	return nil
}

// PublishRemoteConfigV1ReqMultiError is an error wrapping multiple validation
// errors returned by PublishRemoteConfigV1Req.ValidateAll() if the designated
// constraints aren't met.
type PublishRemoteConfigV1ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishRemoteConfigV1ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishRemoteConfigV1ReqMultiError) AllErrors() []error { return m }

// PublishRemoteConfigV1ReqValidationError is the validation error returned by
// PublishRemoteConfigV1Req.Validate if the designated constraints aren't met.
type PublishRemoteConfigV1ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishRemoteConfigV1ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishRemoteConfigV1ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishRemoteConfigV1ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishRemoteConfigV1ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishRemoteConfigV1ReqValidationError) ErrorName() string {
	return "PublishRemoteConfigV1ReqValidationError"
}

// Error satisfies the builtin error interface
func (e PublishRemoteConfigV1ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishRemoteConfigV1Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishRemoteConfigV1ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishRemoteConfigV1ReqValidationError{}

// Validate checks the field values on PublishRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishRemoteConfigRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishRemoteConfigRspMultiError, or nil if none found.
func (m *PublishRemoteConfigRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishRemoteConfigRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublishRemoteConfigRspMultiError(errors)
	}

	return nil
}

// PublishRemoteConfigRspMultiError is an error wrapping multiple validation
// errors returned by PublishRemoteConfigRsp.ValidateAll() if the designated
// constraints aren't met.
type PublishRemoteConfigRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishRemoteConfigRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishRemoteConfigRspMultiError) AllErrors() []error { return m }

// PublishRemoteConfigRspValidationError is the validation error returned by
// PublishRemoteConfigRsp.Validate if the designated constraints aren't met.
type PublishRemoteConfigRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishRemoteConfigRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishRemoteConfigRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishRemoteConfigRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishRemoteConfigRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishRemoteConfigRspValidationError) ErrorName() string {
	return "PublishRemoteConfigRspValidationError"
}

// Error satisfies the builtin error interface
func (e PublishRemoteConfigRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishRemoteConfigRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishRemoteConfigRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishRemoteConfigRspValidationError{}

// Validate checks the field values on CancelPublishRemoteConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelPublishRemoteConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPublishRemoteConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelPublishRemoteConfigReqMultiError, or nil if none found.
func (m *CancelPublishRemoteConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPublishRemoteConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := CancelPublishRemoteConfigReqValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelPublishRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelPublishRemoteConfigReqValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelPublishRemoteConfigReqValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CancelPublishRemoteConfigReqMultiError(errors)
	}

	return nil
}

// CancelPublishRemoteConfigReqMultiError is an error wrapping multiple
// validation errors returned by CancelPublishRemoteConfigReq.ValidateAll() if
// the designated constraints aren't met.
type CancelPublishRemoteConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPublishRemoteConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPublishRemoteConfigReqMultiError) AllErrors() []error { return m }

// CancelPublishRemoteConfigReqValidationError is the validation error returned
// by CancelPublishRemoteConfigReq.Validate if the designated constraints
// aren't met.
type CancelPublishRemoteConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPublishRemoteConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPublishRemoteConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPublishRemoteConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPublishRemoteConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPublishRemoteConfigReqValidationError) ErrorName() string {
	return "CancelPublishRemoteConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPublishRemoteConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPublishRemoteConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPublishRemoteConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPublishRemoteConfigReqValidationError{}

// Validate checks the field values on CancelPublishRemoteConfigRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelPublishRemoteConfigRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPublishRemoteConfigRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelPublishRemoteConfigRspMultiError, or nil if none found.
func (m *CancelPublishRemoteConfigRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPublishRemoteConfigRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelPublishRemoteConfigRspMultiError(errors)
	}

	return nil
}

// CancelPublishRemoteConfigRspMultiError is an error wrapping multiple
// validation errors returned by CancelPublishRemoteConfigRsp.ValidateAll() if
// the designated constraints aren't met.
type CancelPublishRemoteConfigRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPublishRemoteConfigRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPublishRemoteConfigRspMultiError) AllErrors() []error { return m }

// CancelPublishRemoteConfigRspValidationError is the validation error returned
// by CancelPublishRemoteConfigRsp.Validate if the designated constraints
// aren't met.
type CancelPublishRemoteConfigRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPublishRemoteConfigRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPublishRemoteConfigRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPublishRemoteConfigRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPublishRemoteConfigRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPublishRemoteConfigRspValidationError) ErrorName() string {
	return "CancelPublishRemoteConfigRspValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPublishRemoteConfigRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPublishRemoteConfigRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPublishRemoteConfigRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPublishRemoteConfigRspValidationError{}

// Validate checks the field values on GetRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemoteConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemoteConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRemoteConfigReqMultiError, or nil if none found.
func (m *GetRemoteConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemoteConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	if len(errors) > 0 {
		return GetRemoteConfigReqMultiError(errors)
	}

	return nil
}

// GetRemoteConfigReqMultiError is an error wrapping multiple validation errors
// returned by GetRemoteConfigReq.ValidateAll() if the designated constraints
// aren't met.
type GetRemoteConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemoteConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemoteConfigReqMultiError) AllErrors() []error { return m }

// GetRemoteConfigReqValidationError is the validation error returned by
// GetRemoteConfigReq.Validate if the designated constraints aren't met.
type GetRemoteConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemoteConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemoteConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemoteConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemoteConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemoteConfigReqValidationError) ErrorName() string {
	return "GetRemoteConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemoteConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemoteConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemoteConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemoteConfigReqValidationError{}

// Validate checks the field values on GetRemoteConfigV1Req with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemoteConfigV1Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemoteConfigV1Req with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRemoteConfigV1ReqMultiError, or nil if none found.
func (m *GetRemoteConfigV1Req) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemoteConfigV1Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Appid

	// no validation rules for Env

	// no validation rules for Channel

	// no validation rules for Platform

	// no validation rules for ConfigName

	if len(errors) > 0 {
		return GetRemoteConfigV1ReqMultiError(errors)
	}

	return nil
}

// GetRemoteConfigV1ReqMultiError is an error wrapping multiple validation
// errors returned by GetRemoteConfigV1Req.ValidateAll() if the designated
// constraints aren't met.
type GetRemoteConfigV1ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemoteConfigV1ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemoteConfigV1ReqMultiError) AllErrors() []error { return m }

// GetRemoteConfigV1ReqValidationError is the validation error returned by
// GetRemoteConfigV1Req.Validate if the designated constraints aren't met.
type GetRemoteConfigV1ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemoteConfigV1ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemoteConfigV1ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemoteConfigV1ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemoteConfigV1ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemoteConfigV1ReqValidationError) ErrorName() string {
	return "GetRemoteConfigV1ReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemoteConfigV1ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemoteConfigV1Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemoteConfigV1ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemoteConfigV1ReqValidationError{}

// Validate checks the field values on GetRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemoteConfigRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemoteConfigRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRemoteConfigRspMultiError, or nil if none found.
func (m *GetRemoteConfigRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemoteConfigRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfigData

	if len(errors) > 0 {
		return GetRemoteConfigRspMultiError(errors)
	}

	return nil
}

// GetRemoteConfigRspMultiError is an error wrapping multiple validation errors
// returned by GetRemoteConfigRsp.ValidateAll() if the designated constraints
// aren't met.
type GetRemoteConfigRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemoteConfigRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemoteConfigRspMultiError) AllErrors() []error { return m }

// GetRemoteConfigRspValidationError is the validation error returned by
// GetRemoteConfigRsp.Validate if the designated constraints aren't met.
type GetRemoteConfigRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemoteConfigRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemoteConfigRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemoteConfigRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemoteConfigRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemoteConfigRspValidationError) ErrorName() string {
	return "GetRemoteConfigRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemoteConfigRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemoteConfigRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemoteConfigRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemoteConfigRspValidationError{}
