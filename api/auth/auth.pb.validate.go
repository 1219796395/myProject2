// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/auth/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateTokenByCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateTokenByCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTokenByCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTokenByCodeRequestMultiError, or nil if none found.
func (m *GenerateTokenByCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTokenByCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthCode()) < 1 {
		err := GenerateTokenByCodeRequestValidationError{
			field:  "AuthCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRedirectUrl()); l < 1 || l > 128 {
		err := GenerateTokenByCodeRequestValidationError{
			field:  "RedirectUrl",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateTokenByCodeRequestMultiError(errors)
	}

	return nil
}

// GenerateTokenByCodeRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateTokenByCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type GenerateTokenByCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTokenByCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTokenByCodeRequestMultiError) AllErrors() []error { return m }

// GenerateTokenByCodeRequestValidationError is the validation error returned
// by GenerateTokenByCodeRequest.Validate if the designated constraints aren't met.
type GenerateTokenByCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTokenByCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTokenByCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTokenByCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTokenByCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTokenByCodeRequestValidationError) ErrorName() string {
	return "GenerateTokenByCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateTokenByCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTokenByCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTokenByCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTokenByCodeRequestValidationError{}

// Validate checks the field values on GenerateTokenByCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateTokenByCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTokenByCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTokenByCodeResponseMultiError, or nil if none found.
func (m *GenerateTokenByCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTokenByCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GenerateTokenByCodeResponseMultiError(errors)
	}

	return nil
}

// GenerateTokenByCodeResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateTokenByCodeResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateTokenByCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTokenByCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTokenByCodeResponseMultiError) AllErrors() []error { return m }

// GenerateTokenByCodeResponseValidationError is the validation error returned
// by GenerateTokenByCodeResponse.Validate if the designated constraints
// aren't met.
type GenerateTokenByCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTokenByCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTokenByCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTokenByCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTokenByCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTokenByCodeResponseValidationError) ErrorName() string {
	return "GenerateTokenByCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateTokenByCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTokenByCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTokenByCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTokenByCodeResponseValidationError{}

// Validate checks the field values on SearchUserMdmInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserMdmInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserMdmInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserMdmInfoRequestMultiError, or nil if none found.
func (m *SearchUserMdmInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserMdmInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := SearchUserMdmInfoRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserMdmInfoRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserMdmInfoRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserMdmInfoRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 32 {
		err := SearchUserMdmInfoRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchUserMdmInfoRequestMultiError(errors)
	}

	return nil
}

// SearchUserMdmInfoRequestMultiError is an error wrapping multiple validation
// errors returned by SearchUserMdmInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchUserMdmInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserMdmInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserMdmInfoRequestMultiError) AllErrors() []error { return m }

// SearchUserMdmInfoRequestValidationError is the validation error returned by
// SearchUserMdmInfoRequest.Validate if the designated constraints aren't met.
type SearchUserMdmInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserMdmInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserMdmInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserMdmInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserMdmInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserMdmInfoRequestValidationError) ErrorName() string {
	return "SearchUserMdmInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserMdmInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserMdmInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserMdmInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserMdmInfoRequestValidationError{}

// Validate checks the field values on MdmUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MdmUserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MdmUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MdmUserInfoMultiError, or
// nil if none found.
func (m *MdmUserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MdmUserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HgId

	// no validation rules for Name

	// no validation rules for Nickname

	// no validation rules for Email

	if len(errors) > 0 {
		return MdmUserInfoMultiError(errors)
	}

	return nil
}

// MdmUserInfoMultiError is an error wrapping multiple validation errors
// returned by MdmUserInfo.ValidateAll() if the designated constraints aren't met.
type MdmUserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MdmUserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MdmUserInfoMultiError) AllErrors() []error { return m }

// MdmUserInfoValidationError is the validation error returned by
// MdmUserInfo.Validate if the designated constraints aren't met.
type MdmUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MdmUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MdmUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MdmUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MdmUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MdmUserInfoValidationError) ErrorName() string { return "MdmUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e MdmUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMdmUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MdmUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MdmUserInfoValidationError{}

// Validate checks the field values on SearchUserMdmInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserMdmInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserMdmInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserMdmInfoResponseMultiError, or nil if none found.
func (m *SearchUserMdmInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserMdmInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserMdmInfoResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserMdmInfoResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserMdmInfoResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUserMdmInfoResponseMultiError(errors)
	}

	return nil
}

// SearchUserMdmInfoResponseMultiError is an error wrapping multiple validation
// errors returned by SearchUserMdmInfoResponse.ValidateAll() if the
// designated constraints aren't met.
type SearchUserMdmInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserMdmInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserMdmInfoResponseMultiError) AllErrors() []error { return m }

// SearchUserMdmInfoResponseValidationError is the validation error returned by
// SearchUserMdmInfoResponse.Validate if the designated constraints aren't met.
type SearchUserMdmInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserMdmInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserMdmInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserMdmInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserMdmInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserMdmInfoResponseValidationError) ErrorName() string {
	return "SearchUserMdmInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserMdmInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserMdmInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserMdmInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserMdmInfoResponseValidationError{}

// Validate checks the field values on MeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeRequestMultiError, or nil
// if none found.
func (m *MeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := MeRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MeRequestMultiError(errors)
	}

	return nil
}

// MeRequestMultiError is an error wrapping multiple validation errors returned
// by MeRequest.ValidateAll() if the designated constraints aren't met.
type MeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeRequestMultiError) AllErrors() []error { return m }

// MeRequestValidationError is the validation error returned by
// MeRequest.Validate if the designated constraints aren't met.
type MeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeRequestValidationError) ErrorName() string { return "MeRequestValidationError" }

// Error satisfies the builtin error interface
func (e MeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeRequestValidationError{}

// Validate checks the field values on MeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeResponseMultiError, or
// nil if none found.
func (m *MeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeResponseMultiError(errors)
	}

	return nil
}

// MeResponseMultiError is an error wrapping multiple validation errors
// returned by MeResponse.ValidateAll() if the designated constraints aren't met.
type MeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeResponseMultiError) AllErrors() []error { return m }

// MeResponseValidationError is the validation error returned by
// MeResponse.Validate if the designated constraints aren't met.
type MeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeResponseValidationError) ErrorName() string { return "MeResponseValidationError" }

// Error satisfies the builtin error interface
func (e MeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeResponseValidationError{}

// Validate checks the field values on ListAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminUserRequestMultiError, or nil if none found.
func (m *ListAdminUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := ListAdminUserRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdminUserRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetPageSize(); val <= 0 || val > 200 {
		err := ListAdminUserRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 200]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPage()); l < 1 || l > 4 {
		err := ListAdminUserRequestValidationError{
			field:  "Page",
			reason: "value length must be between 1 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAdminUserRequestMultiError(errors)
	}

	return nil
}

// ListAdminUserRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdminUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAdminUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminUserRequestMultiError) AllErrors() []error { return m }

// ListAdminUserRequestValidationError is the validation error returned by
// ListAdminUserRequest.Validate if the designated constraints aren't met.
type ListAdminUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminUserRequestValidationError) ErrorName() string {
	return "ListAdminUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminUserRequestValidationError{}

// Validate checks the field values on ListAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminUserResponseMultiError, or nil if none found.
func (m *ListAdminUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdminUserResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdminUserResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdminUserResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAdminUserResponseMultiError(errors)
	}

	return nil
}

// ListAdminUserResponseMultiError is an error wrapping multiple validation
// errors returned by ListAdminUserResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAdminUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminUserResponseMultiError) AllErrors() []error { return m }

// ListAdminUserResponseValidationError is the validation error returned by
// ListAdminUserResponse.Validate if the designated constraints aren't met.
type ListAdminUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminUserResponseValidationError) ErrorName() string {
	return "ListAdminUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminUserResponseValidationError{}

// Validate checks the field values on CreateAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdminUserRequestMultiError, or nil if none found.
func (m *CreateAdminUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := CreateAdminUserRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAdminUserRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAdminUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAdminUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAdminUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetHgId()) < 1 {
		err := CreateAdminUserRequestValidationError{
			field:  "HgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAdminUserRequestMultiError(errors)
	}

	return nil
}

// CreateAdminUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAdminUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAdminUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminUserRequestMultiError) AllErrors() []error { return m }

// CreateAdminUserRequestValidationError is the validation error returned by
// CreateAdminUserRequest.Validate if the designated constraints aren't met.
type CreateAdminUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminUserRequestValidationError) ErrorName() string {
	return "CreateAdminUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdminUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminUserRequestValidationError{}

// Validate checks the field values on CreateAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdminUserResponseMultiError, or nil if none found.
func (m *CreateAdminUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAdminUserResponseMultiError(errors)
	}

	return nil
}

// CreateAdminUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAdminUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAdminUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminUserResponseMultiError) AllErrors() []error { return m }

// CreateAdminUserResponseValidationError is the validation error returned by
// CreateAdminUserResponse.Validate if the designated constraints aren't met.
type CreateAdminUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminUserResponseValidationError) ErrorName() string {
	return "CreateAdminUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdminUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminUserResponseValidationError{}

// Validate checks the field values on DeleteAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminUserRequestMultiError, or nil if none found.
func (m *DeleteAdminUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := DeleteAdminUserRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAdminUserRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := DeleteAdminUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAdminUserRequestMultiError(errors)
	}

	return nil
}

// DeleteAdminUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAdminUserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAdminUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminUserRequestMultiError) AllErrors() []error { return m }

// DeleteAdminUserRequestValidationError is the validation error returned by
// DeleteAdminUserRequest.Validate if the designated constraints aren't met.
type DeleteAdminUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminUserRequestValidationError) ErrorName() string {
	return "DeleteAdminUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminUserRequestValidationError{}

// Validate checks the field values on DeleteAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminUserResponseMultiError, or nil if none found.
func (m *DeleteAdminUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAdminUserResponseMultiError(errors)
	}

	return nil
}

// DeleteAdminUserResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAdminUserResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAdminUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminUserResponseMultiError) AllErrors() []error { return m }

// DeleteAdminUserResponseValidationError is the validation error returned by
// DeleteAdminUserResponse.Validate if the designated constraints aren't met.
type DeleteAdminUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminUserResponseValidationError) ErrorName() string {
	return "DeleteAdminUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminUserResponseValidationError{}

// Validate checks the field values on BanAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BanAdminUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BanAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BanAdminUserRequestMultiError, or nil if none found.
func (m *BanAdminUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BanAdminUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := BanAdminUserRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BanAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BanAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BanAdminUserRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := BanAdminUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BanAdminUserRequestMultiError(errors)
	}

	return nil
}

// BanAdminUserRequestMultiError is an error wrapping multiple validation
// errors returned by BanAdminUserRequest.ValidateAll() if the designated
// constraints aren't met.
type BanAdminUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BanAdminUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BanAdminUserRequestMultiError) AllErrors() []error { return m }

// BanAdminUserRequestValidationError is the validation error returned by
// BanAdminUserRequest.Validate if the designated constraints aren't met.
type BanAdminUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanAdminUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanAdminUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanAdminUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanAdminUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanAdminUserRequestValidationError) ErrorName() string {
	return "BanAdminUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BanAdminUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanAdminUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanAdminUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanAdminUserRequestValidationError{}

// Validate checks the field values on BanAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BanAdminUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BanAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BanAdminUserResponseMultiError, or nil if none found.
func (m *BanAdminUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BanAdminUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BanAdminUserResponseMultiError(errors)
	}

	return nil
}

// BanAdminUserResponseMultiError is an error wrapping multiple validation
// errors returned by BanAdminUserResponse.ValidateAll() if the designated
// constraints aren't met.
type BanAdminUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BanAdminUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BanAdminUserResponseMultiError) AllErrors() []error { return m }

// BanAdminUserResponseValidationError is the validation error returned by
// BanAdminUserResponse.Validate if the designated constraints aren't met.
type BanAdminUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanAdminUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanAdminUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanAdminUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanAdminUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanAdminUserResponseValidationError) ErrorName() string {
	return "BanAdminUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BanAdminUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanAdminUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanAdminUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanAdminUserResponseValidationError{}

// Validate checks the field values on RestoreAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreAdminUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreAdminUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreAdminUserRequestMultiError, or nil if none found.
func (m *RestoreAdminUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreAdminUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := RestoreAdminUserRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreAdminUserRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreAdminUserRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := RestoreAdminUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestoreAdminUserRequestMultiError(errors)
	}

	return nil
}

// RestoreAdminUserRequestMultiError is an error wrapping multiple validation
// errors returned by RestoreAdminUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RestoreAdminUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreAdminUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreAdminUserRequestMultiError) AllErrors() []error { return m }

// RestoreAdminUserRequestValidationError is the validation error returned by
// RestoreAdminUserRequest.Validate if the designated constraints aren't met.
type RestoreAdminUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreAdminUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreAdminUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreAdminUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreAdminUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreAdminUserRequestValidationError) ErrorName() string {
	return "RestoreAdminUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreAdminUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreAdminUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreAdminUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreAdminUserRequestValidationError{}

// Validate checks the field values on RestoreAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreAdminUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreAdminUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreAdminUserResponseMultiError, or nil if none found.
func (m *RestoreAdminUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreAdminUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestoreAdminUserResponseMultiError(errors)
	}

	return nil
}

// RestoreAdminUserResponseMultiError is an error wrapping multiple validation
// errors returned by RestoreAdminUserResponse.ValidateAll() if the designated
// constraints aren't met.
type RestoreAdminUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreAdminUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreAdminUserResponseMultiError) AllErrors() []error { return m }

// RestoreAdminUserResponseValidationError is the validation error returned by
// RestoreAdminUserResponse.Validate if the designated constraints aren't met.
type RestoreAdminUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreAdminUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreAdminUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreAdminUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreAdminUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreAdminUserResponseValidationError) ErrorName() string {
	return "RestoreAdminUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreAdminUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreAdminUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreAdminUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreAdminUserResponseValidationError{}

// Validate checks the field values on UpdateAdminUserRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminUserRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdminUserRoleRequestMultiError, or nil if none found.
func (m *UpdateAdminUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := UpdateAdminUserRoleRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAdminUserRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAdminUserRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAdminUserRoleRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := UpdateAdminUserRoleRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRoleIds() {
		_, _ = idx, item

		if item <= 0 {
			err := UpdateAdminUserRoleRequestValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateAdminUserRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateAdminUserRoleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAdminUserRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAdminUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminUserRoleRequestMultiError) AllErrors() []error { return m }

// UpdateAdminUserRoleRequestValidationError is the validation error returned
// by UpdateAdminUserRoleRequest.Validate if the designated constraints aren't met.
type UpdateAdminUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminUserRoleRequestValidationError) ErrorName() string {
	return "UpdateAdminUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdminUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminUserRoleRequestValidationError{}

// Validate checks the field values on UpdateAdminUserRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminUserRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdminUserRoleResponseMultiError, or nil if none found.
func (m *UpdateAdminUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAdminUserRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateAdminUserRoleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAdminUserRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateAdminUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminUserRoleResponseMultiError) AllErrors() []error { return m }

// UpdateAdminUserRoleResponseValidationError is the validation error returned
// by UpdateAdminUserRoleResponse.Validate if the designated constraints
// aren't met.
type UpdateAdminUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminUserRoleResponseValidationError) ErrorName() string {
	return "UpdateAdminUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdminUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminUserRoleResponseValidationError{}

// Validate checks the field values on AssignAdminRoleResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignAdminRoleResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignAdminRoleResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignAdminRoleResourceRequestMultiError, or nil if none found.
func (m *AssignAdminRoleResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignAdminRoleResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := AssignAdminRoleResourceRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssignAdminRoleResourceRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssignAdminRoleResourceRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssignAdminRoleResourceRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRoleId() <= 0 {
		err := AssignAdminRoleResourceRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetKeys()) > 1 {
		err := AssignAdminRoleResourceRequestValidationError{
			field:  "Keys",
			reason: "value must contain no more than 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := AssignAdminRoleResourceRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AssignAdminRoleResourceRequestMultiError(errors)
	}

	return nil
}

// AssignAdminRoleResourceRequestMultiError is an error wrapping multiple
// validation errors returned by AssignAdminRoleResourceRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignAdminRoleResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignAdminRoleResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignAdminRoleResourceRequestMultiError) AllErrors() []error { return m }

// AssignAdminRoleResourceRequestValidationError is the validation error
// returned by AssignAdminRoleResourceRequest.Validate if the designated
// constraints aren't met.
type AssignAdminRoleResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignAdminRoleResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignAdminRoleResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignAdminRoleResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignAdminRoleResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignAdminRoleResourceRequestValidationError) ErrorName() string {
	return "AssignAdminRoleResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignAdminRoleResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignAdminRoleResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignAdminRoleResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignAdminRoleResourceRequestValidationError{}

// Validate checks the field values on AssignAdminRoleResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignAdminRoleResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignAdminRoleResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignAdminRoleResourceResponseMultiError, or nil if none found.
func (m *AssignAdminRoleResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignAdminRoleResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignAdminRoleResourceResponseMultiError(errors)
	}

	return nil
}

// AssignAdminRoleResourceResponseMultiError is an error wrapping multiple
// validation errors returned by AssignAdminRoleResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type AssignAdminRoleResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignAdminRoleResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignAdminRoleResourceResponseMultiError) AllErrors() []error { return m }

// AssignAdminRoleResourceResponseValidationError is the validation error
// returned by AssignAdminRoleResourceResponse.Validate if the designated
// constraints aren't met.
type AssignAdminRoleResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignAdminRoleResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignAdminRoleResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignAdminRoleResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignAdminRoleResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignAdminRoleResourceResponseValidationError) ErrorName() string {
	return "AssignAdminRoleResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignAdminRoleResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignAdminRoleResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignAdminRoleResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignAdminRoleResourceResponseValidationError{}

// Validate checks the field values on SearchAdminRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAdminRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAdminRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAdminRoleRequestMultiError, or nil if none found.
func (m *SearchAdminRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAdminRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := SearchAdminRoleRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchAdminRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchAdminRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAdminRoleRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKey()) > 32 {
		err := SearchAdminRoleRequestValidationError{
			field:  "Key",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Next

	if val := m.GetPageSize(); val < 0 || val > 200 {
		err := SearchAdminRoleRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 200]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchAdminRoleRequestMultiError(errors)
	}

	return nil
}

// SearchAdminRoleRequestMultiError is an error wrapping multiple validation
// errors returned by SearchAdminRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchAdminRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAdminRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAdminRoleRequestMultiError) AllErrors() []error { return m }

// SearchAdminRoleRequestValidationError is the validation error returned by
// SearchAdminRoleRequest.Validate if the designated constraints aren't met.
type SearchAdminRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAdminRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAdminRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAdminRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAdminRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAdminRoleRequestValidationError) ErrorName() string {
	return "SearchAdminRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAdminRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAdminRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAdminRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAdminRoleRequestValidationError{}

// Validate checks the field values on SearchAdminRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAdminRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAdminRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAdminRoleResponseMultiError, or nil if none found.
func (m *SearchAdminRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAdminRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAdminRoleResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAdminRoleResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAdminRoleResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	// no validation rules for HasMore

	if len(errors) > 0 {
		return SearchAdminRoleResponseMultiError(errors)
	}

	return nil
}

// SearchAdminRoleResponseMultiError is an error wrapping multiple validation
// errors returned by SearchAdminRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchAdminRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAdminRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAdminRoleResponseMultiError) AllErrors() []error { return m }

// SearchAdminRoleResponseValidationError is the validation error returned by
// SearchAdminRoleResponse.Validate if the designated constraints aren't met.
type SearchAdminRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAdminRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAdminRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAdminRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAdminRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAdminRoleResponseValidationError) ErrorName() string {
	return "SearchAdminRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAdminRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAdminRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAdminRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAdminRoleResponseValidationError{}

// Validate checks the field values on RetrieveAdminRoleResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveAdminRoleResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveAdminRoleResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveAdminRoleResourceRequestMultiError, or nil if none found.
func (m *RetrieveAdminRoleResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveAdminRoleResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := RetrieveAdminRoleResourceRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveAdminRoleResourceRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveAdminRoleResourceRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveAdminRoleResourceRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRoleId() <= 0 {
		err := RetrieveAdminRoleResourceRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RetrieveAdminRoleResourceRequestMultiError(errors)
	}

	return nil
}

// RetrieveAdminRoleResourceRequestMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveAdminRoleResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type RetrieveAdminRoleResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveAdminRoleResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveAdminRoleResourceRequestMultiError) AllErrors() []error { return m }

// RetrieveAdminRoleResourceRequestValidationError is the validation error
// returned by RetrieveAdminRoleResourceRequest.Validate if the designated
// constraints aren't met.
type RetrieveAdminRoleResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAdminRoleResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAdminRoleResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAdminRoleResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAdminRoleResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAdminRoleResourceRequestValidationError) ErrorName() string {
	return "RetrieveAdminRoleResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAdminRoleResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAdminRoleResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAdminRoleResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAdminRoleResourceRequestValidationError{}

// Validate checks the field values on RetrieveAdminRoleResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveAdminRoleResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveAdminRoleResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RetrieveAdminRoleResourceResponseMultiError, or nil if none found.
func (m *RetrieveAdminRoleResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveAdminRoleResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveAdminRoleResourceResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveAdminRoleResourceResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveAdminRoleResourceResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveAdminRoleResourceResponseMultiError(errors)
	}

	return nil
}

// RetrieveAdminRoleResourceResponseMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveAdminRoleResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type RetrieveAdminRoleResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveAdminRoleResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveAdminRoleResourceResponseMultiError) AllErrors() []error { return m }

// RetrieveAdminRoleResourceResponseValidationError is the validation error
// returned by RetrieveAdminRoleResourceResponse.Validate if the designated
// constraints aren't met.
type RetrieveAdminRoleResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAdminRoleResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAdminRoleResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAdminRoleResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAdminRoleResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAdminRoleResourceResponseValidationError) ErrorName() string {
	return "RetrieveAdminRoleResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAdminRoleResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAdminRoleResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAdminRoleResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAdminRoleResourceResponseValidationError{}

// Validate checks the field values on SaveAdminRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveAdminRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveAdminRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveAdminRoleRequestMultiError, or nil if none found.
func (m *SaveAdminRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveAdminRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := SaveAdminRoleRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveAdminRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveAdminRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveAdminRoleRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRole() == nil {
		err := SaveAdminRoleRequestValidationError{
			field:  "Role",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveAdminRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveAdminRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveAdminRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveAdminRoleRequestMultiError(errors)
	}

	return nil
}

// SaveAdminRoleRequestMultiError is an error wrapping multiple validation
// errors returned by SaveAdminRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveAdminRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveAdminRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveAdminRoleRequestMultiError) AllErrors() []error { return m }

// SaveAdminRoleRequestValidationError is the validation error returned by
// SaveAdminRoleRequest.Validate if the designated constraints aren't met.
type SaveAdminRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveAdminRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveAdminRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveAdminRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveAdminRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveAdminRoleRequestValidationError) ErrorName() string {
	return "SaveAdminRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveAdminRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveAdminRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveAdminRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveAdminRoleRequestValidationError{}

// Validate checks the field values on SaveAdminRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveAdminRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveAdminRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveAdminRoleResponseMultiError, or nil if none found.
func (m *SaveAdminRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveAdminRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveAdminRoleResponseMultiError(errors)
	}

	return nil
}

// SaveAdminRoleResponseMultiError is an error wrapping multiple validation
// errors returned by SaveAdminRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveAdminRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveAdminRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveAdminRoleResponseMultiError) AllErrors() []error { return m }

// SaveAdminRoleResponseValidationError is the validation error returned by
// SaveAdminRoleResponse.Validate if the designated constraints aren't met.
type SaveAdminRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveAdminRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveAdminRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveAdminRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveAdminRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveAdminRoleResponseValidationError) ErrorName() string {
	return "SaveAdminRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveAdminRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveAdminRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveAdminRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveAdminRoleResponseValidationError{}

// Validate checks the field values on DeleteAdminRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminRoleRequestMultiError, or nil if none found.
func (m *DeleteAdminRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := DeleteAdminRoleRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAdminRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAdminRoleRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAdminRoleRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRoleId() <= 0 {
		err := DeleteAdminRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAdminRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteAdminRoleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAdminRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAdminRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminRoleRequestMultiError) AllErrors() []error { return m }

// DeleteAdminRoleRequestValidationError is the validation error returned by
// DeleteAdminRoleRequest.Validate if the designated constraints aren't met.
type DeleteAdminRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminRoleRequestValidationError) ErrorName() string {
	return "DeleteAdminRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminRoleRequestValidationError{}

// Validate checks the field values on DeleteAdminRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminRoleResponseMultiError, or nil if none found.
func (m *DeleteAdminRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAdminRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteAdminRoleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAdminRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAdminRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminRoleResponseMultiError) AllErrors() []error { return m }

// DeleteAdminRoleResponseValidationError is the validation error returned by
// DeleteAdminRoleResponse.Validate if the designated constraints aren't met.
type DeleteAdminRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminRoleResponseValidationError) ErrorName() string {
	return "DeleteAdminRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminRoleResponseValidationError{}

// Validate checks the field values on AuthLogAgg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthLogAgg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogAgg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthLogAggMultiError, or
// nil if none found.
func (m *AuthLogAgg) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogAgg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuthLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthLogAggValidationError{
					field:  "AuthLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthLogAggValidationError{
					field:  "AuthLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthLogAggValidationError{
				field:  "AuthLog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthLogAggValidationError{
					field:  "Operator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthLogAggValidationError{
					field:  "Operator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthLogAggValidationError{
				field:  "Operator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthLogAggMultiError(errors)
	}

	return nil
}

// AuthLogAggMultiError is an error wrapping multiple validation errors
// returned by AuthLogAgg.ValidateAll() if the designated constraints aren't met.
type AuthLogAggMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogAggMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogAggMultiError) AllErrors() []error { return m }

// AuthLogAggValidationError is the validation error returned by
// AuthLogAgg.Validate if the designated constraints aren't met.
type AuthLogAggValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogAggValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogAggValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogAggValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogAggValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogAggValidationError) ErrorName() string { return "AuthLogAggValidationError" }

// Error satisfies the builtin error interface
func (e AuthLogAggValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogAgg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogAggValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogAggValidationError{}

// Validate checks the field values on ListAuthLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuthLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthLogRequestMultiError, or nil if none found.
func (m *ListAuthLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommon() == nil {
		err := ListAuthLogRequestValidationError{
			field:  "Common",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAuthLogRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAuthLogRequestValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAuthLogRequestValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetContentKey()) > 32 {
		err := ListAuthLogRequestValidationError{
			field:  "ContentKey",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOperatorKey()) > 32 {
		err := ListAuthLogRequestValidationError{
			field:  "OperatorKey",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := ListAuthLogRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Next

	if len(errors) > 0 {
		return ListAuthLogRequestMultiError(errors)
	}

	return nil
}

// ListAuthLogRequestMultiError is an error wrapping multiple validation errors
// returned by ListAuthLogRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAuthLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthLogRequestMultiError) AllErrors() []error { return m }

// ListAuthLogRequestValidationError is the validation error returned by
// ListAuthLogRequest.Validate if the designated constraints aren't met.
type ListAuthLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthLogRequestValidationError) ErrorName() string {
	return "ListAuthLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthLogRequestValidationError{}

// Validate checks the field values on ListAuthLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuthLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthLogResponseMultiError, or nil if none found.
func (m *ListAuthLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuthLogResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuthLogResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuthLogResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	// no validation rules for HasMore

	if len(errors) > 0 {
		return ListAuthLogResponseMultiError(errors)
	}

	return nil
}

// ListAuthLogResponseMultiError is an error wrapping multiple validation
// errors returned by ListAuthLogResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAuthLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthLogResponseMultiError) AllErrors() []error { return m }

// ListAuthLogResponseValidationError is the validation error returned by
// ListAuthLogResponse.Validate if the designated constraints aren't met.
type ListAuthLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthLogResponseValidationError) ErrorName() string {
	return "ListAuthLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthLogResponseValidationError{}

// Validate checks the field values on AdminUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminUserMultiError, or nil
// if none found.
func (m *AdminUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetHgId()); l < 1 || l > 32 {
		err := AdminUserValidationError{
			field:  "HgId",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetEmail()); l < 1 || l > 32 {
		err := AdminUserValidationError{
			field:  "Email",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNickName()); l < 1 || l > 32 {
		err := AdminUserValidationError{
			field:  "NickName",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := AdminUserValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAtTs

	// no validation rules for UpdatedAtTs

	// no validation rules for SkipAuth

	if len(errors) > 0 {
		return AdminUserMultiError(errors)
	}

	return nil
}

// AdminUserMultiError is an error wrapping multiple validation errors returned
// by AdminUser.ValidateAll() if the designated constraints aren't met.
type AdminUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserMultiError) AllErrors() []error { return m }

// AdminUserValidationError is the validation error returned by
// AdminUser.Validate if the designated constraints aren't met.
type AdminUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserValidationError) ErrorName() string { return "AdminUserValidationError" }

// Error satisfies the builtin error interface
func (e AdminUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserValidationError{}

// Validate checks the field values on AdminRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminRoleMultiError, or nil
// if none found.
func (m *AdminRole) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := AdminRoleValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 128 {
		err := AdminRoleValidationError{
			field:  "Description",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for AppId

	// no validation rules for CreatedAtTs

	// no validation rules for UpdatedAtTs

	if len(errors) > 0 {
		return AdminRoleMultiError(errors)
	}

	return nil
}

// AdminRoleMultiError is an error wrapping multiple validation errors returned
// by AdminRole.ValidateAll() if the designated constraints aren't met.
type AdminRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRoleMultiError) AllErrors() []error { return m }

// AdminRoleValidationError is the validation error returned by
// AdminRole.Validate if the designated constraints aren't met.
type AdminRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRoleValidationError) ErrorName() string { return "AdminRoleValidationError" }

// Error satisfies the builtin error interface
func (e AdminRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRoleValidationError{}

// Validate checks the field values on AdminAppAgg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminAppAgg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAppAgg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminAppAggMultiError, or
// nil if none found.
func (m *AdminAppAgg) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAppAgg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminAppAggValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminAppAggValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminAppAggValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsSuper

	// no validation rules for IsBanned

	if len(errors) > 0 {
		return AdminAppAggMultiError(errors)
	}

	return nil
}

// AdminAppAggMultiError is an error wrapping multiple validation errors
// returned by AdminAppAgg.ValidateAll() if the designated constraints aren't met.
type AdminAppAggMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAppAggMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAppAggMultiError) AllErrors() []error { return m }

// AdminAppAggValidationError is the validation error returned by
// AdminAppAgg.Validate if the designated constraints aren't met.
type AdminAppAggValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAppAggValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAppAggValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAppAggValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAppAggValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAppAggValidationError) ErrorName() string { return "AdminAppAggValidationError" }

// Error satisfies the builtin error interface
func (e AdminAppAggValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAppAgg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAppAggValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAppAggValidationError{}

// Validate checks the field values on AdminUserAgg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminUserAgg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserAgg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminUserAggMultiError, or
// nil if none found.
func (m *AdminUserAgg) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserAgg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUserAggValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUserAggValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUserAggValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUserAggValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUserAggValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUserAggValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminUserAggMultiError(errors)
	}

	return nil
}

// AdminUserAggMultiError is an error wrapping multiple validation errors
// returned by AdminUserAgg.ValidateAll() if the designated constraints aren't met.
type AdminUserAggMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserAggMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserAggMultiError) AllErrors() []error { return m }

// AdminUserAggValidationError is the validation error returned by
// AdminUserAgg.Validate if the designated constraints aren't met.
type AdminUserAggValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserAggValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserAggValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserAggValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserAggValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserAggValidationError) ErrorName() string { return "AdminUserAggValidationError" }

// Error satisfies the builtin error interface
func (e AdminUserAggValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserAgg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserAggValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserAggValidationError{}

// Validate checks the field values on AdminUserListAgg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUserListAgg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserListAgg with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserListAggMultiError, or nil if none found.
func (m *AdminUserListAgg) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserListAgg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUserListAggValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUserListAggValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUserListAggValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUserListAggValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUserListAggValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUserListAggValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUserListAggMultiError(errors)
	}

	return nil
}

// AdminUserListAggMultiError is an error wrapping multiple validation errors
// returned by AdminUserListAgg.ValidateAll() if the designated constraints
// aren't met.
type AdminUserListAggMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserListAggMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserListAggMultiError) AllErrors() []error { return m }

// AdminUserListAggValidationError is the validation error returned by
// AdminUserListAgg.Validate if the designated constraints aren't met.
type AdminUserListAggValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserListAggValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserListAggValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserListAggValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserListAggValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserListAggValidationError) ErrorName() string { return "AdminUserListAggValidationError" }

// Error satisfies the builtin error interface
func (e AdminUserListAggValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserListAgg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserListAggValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserListAggValidationError{}

// Validate checks the field values on AuthLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLog with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthLogMultiError, or nil if none found.
func (m *AuthLog) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OperatorId

	// no validation rules for Operation

	// no validation rules for CreatedAtTs

	// no validation rules for UpdatedAtTs

	// no validation rules for Content

	if len(errors) > 0 {
		return AuthLogMultiError(errors)
	}

	return nil
}

// AuthLogMultiError is an error wrapping multiple validation errors returned
// by AuthLog.ValidateAll() if the designated constraints aren't met.
type AuthLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogMultiError) AllErrors() []error { return m }

// AuthLogValidationError is the validation error returned by AuthLog.Validate
// if the designated constraints aren't met.
type AuthLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogValidationError) ErrorName() string { return "AuthLogValidationError" }

// Error satisfies the builtin error interface
func (e AuthLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogValidationError{}
