// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: api/auth/auth.proto

package auth

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthBanAdminUser = "/api.auth.Auth/BanAdminUser"
const OperationAuthCreateAdminUser = "/api.auth.Auth/CreateAdminUser"
const OperationAuthDeleteAdminRole = "/api.auth.Auth/DeleteAdminRole"
const OperationAuthDeleteAdminUser = "/api.auth.Auth/DeleteAdminUser"
const OperationAuthGenerateTokenByCode = "/api.auth.Auth/GenerateTokenByCode"
const OperationAuthListAdminUser = "/api.auth.Auth/ListAdminUser"
const OperationAuthListAuthLog = "/api.auth.Auth/ListAuthLog"
const OperationAuthMe = "/api.auth.Auth/Me"
const OperationAuthRestoreAdminUser = "/api.auth.Auth/RestoreAdminUser"
const OperationAuthRetrieveAdminRoleResource = "/api.auth.Auth/RetrieveAdminRoleResource"
const OperationAuthSaveAdminRole = "/api.auth.Auth/SaveAdminRole"
const OperationAuthSearchAdminRole = "/api.auth.Auth/SearchAdminRole"
const OperationAuthSearchUserMdmInfo = "/api.auth.Auth/SearchUserMdmInfo"
const OperationAuthUpdateAdminUserRole = "/api.auth.Auth/UpdateAdminUserRole"

type AuthHTTPServer interface {
	// BanAdminUser 封禁管理员
	BanAdminUser(context.Context, *BanAdminUserRequest) (*BanAdminUserResponse, error)
	// CreateAdminUser 管理后台新增人员, 无法编辑超管
	CreateAdminUser(context.Context, *CreateAdminUserRequest) (*CreateAdminUserResponse, error)
	// DeleteAdminRole 管理后台删除角色
	DeleteAdminRole(context.Context, *DeleteAdminRoleRequest) (*DeleteAdminRoleResponse, error)
	// DeleteAdminUser 删除管理员，不能删除自己和超管
	DeleteAdminUser(context.Context, *DeleteAdminUserRequest) (*DeleteAdminUserResponse, error)
	// GenerateTokenByCode 登陆，用sso code换取token
	GenerateTokenByCode(context.Context, *GenerateTokenByCodeRequest) (*GenerateTokenByCodeResponse, error)
	// ListAdminUser 拉取管理后台人员列表
	ListAdminUser(context.Context, *ListAdminUserRequest) (*ListAdminUserResponse, error)
	// ListAuthLog 查询权限管理日志
	ListAuthLog(context.Context, *ListAuthLogRequest) (*ListAuthLogResponse, error)
	// Me 用户查看自己的权限
	Me(context.Context, *MeRequest) (*MeResponse, error)
	// RestoreAdminUser 解封管理员
	RestoreAdminUser(context.Context, *RestoreAdminUserRequest) (*RestoreAdminUserResponse, error)
	// RetrieveAdminRoleResource 管理后台角色的权限列表 仅用于查看角色的全部权限
	RetrieveAdminRoleResource(context.Context, *RetrieveAdminRoleResourceRequest) (*RetrieveAdminRoleResourceResponse, error)
	// SaveAdminRole 管理后台新增/修改角色
	SaveAdminRole(context.Context, *SaveAdminRoleRequest) (*SaveAdminRoleResponse, error)
	// SearchAdminRole 管理后台角色列表
	SearchAdminRole(context.Context, *SearchAdminRoleRequest) (*SearchAdminRoleResponse, error)
	// SearchUserMdmInfo 在mbm系统模糊搜索用户信息
	SearchUserMdmInfo(context.Context, *SearchUserMdmInfoRequest) (*SearchUserMdmInfoResponse, error)
	// UpdateAdminUserRole 管理后台给管理员分配角色，不能更改超管角色
	UpdateAdminUserRole(context.Context, *UpdateAdminUserRoleRequest) (*UpdateAdminUserRoleResponse, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth/generate_token_by_code", _Auth_GenerateTokenByCode0_HTTP_Handler(srv))
	r.POST("/v1/auth/mdm/search", _Auth_SearchUserMdmInfo0_HTTP_Handler(srv))
	r.POST("/v1/auth/user/me", _Auth_Me0_HTTP_Handler(srv))
	r.POST("/v1/auth/user/list", _Auth_ListAdminUser0_HTTP_Handler(srv))
	r.POST("/v1/auth/user/create", _Auth_CreateAdminUser0_HTTP_Handler(srv))
	r.POST("/v1/auth/user/delete", _Auth_DeleteAdminUser0_HTTP_Handler(srv))
	r.POST("/v1/auth/user/ban", _Auth_BanAdminUser0_HTTP_Handler(srv))
	r.POST("/v1/auth/user/restore", _Auth_RestoreAdminUser0_HTTP_Handler(srv))
	r.POST("/v1/auth/user/assign_role", _Auth_UpdateAdminUserRole0_HTTP_Handler(srv))
	r.POST("/v1/auth/role/list", _Auth_SearchAdminRole0_HTTP_Handler(srv))
	r.POST("/v1/auth/role/info", _Auth_RetrieveAdminRoleResource0_HTTP_Handler(srv))
	r.POST("/v1/auth/role/save", _Auth_SaveAdminRole0_HTTP_Handler(srv))
	r.POST("/v1/auth/role/delete", _Auth_DeleteAdminRole0_HTTP_Handler(srv))
	r.POST("/v1/auth/log/list", _Auth_ListAuthLog0_HTTP_Handler(srv))
}

func _Auth_GenerateTokenByCode0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateTokenByCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGenerateTokenByCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateTokenByCode(ctx, req.(*GenerateTokenByCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateTokenByCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_SearchUserMdmInfo0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchUserMdmInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthSearchUserMdmInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchUserMdmInfo(ctx, req.(*SearchUserMdmInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchUserMdmInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_Me0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthMe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Me(ctx, req.(*MeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MeResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListAdminUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdminUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthListAdminUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdminUser(ctx, req.(*ListAdminUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdminUserResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreateAdminUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAdminUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreateAdminUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdminUser(ctx, req.(*CreateAdminUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAdminUserResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteAdminUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdminUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteAdminUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdminUser(ctx, req.(*DeleteAdminUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAdminUserResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_BanAdminUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BanAdminUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthBanAdminUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BanAdminUser(ctx, req.(*BanAdminUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BanAdminUserResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_RestoreAdminUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RestoreAdminUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthRestoreAdminUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestoreAdminUser(ctx, req.(*RestoreAdminUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RestoreAdminUserResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateAdminUserRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdminUserRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthUpdateAdminUserRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdminUserRole(ctx, req.(*UpdateAdminUserRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAdminUserRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_SearchAdminRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchAdminRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthSearchAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchAdminRole(ctx, req.(*SearchAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchAdminRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_RetrieveAdminRoleResource0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RetrieveAdminRoleResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthRetrieveAdminRoleResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RetrieveAdminRoleResource(ctx, req.(*RetrieveAdminRoleResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RetrieveAdminRoleResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_SaveAdminRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveAdminRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthSaveAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveAdminRole(ctx, req.(*SaveAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveAdminRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteAdminRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdminRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdminRole(ctx, req.(*DeleteAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAdminRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListAuthLog0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAuthLogRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthListAuthLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuthLog(ctx, req.(*ListAuthLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAuthLogResponse)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	BanAdminUser(ctx context.Context, req *BanAdminUserRequest, opts ...http.CallOption) (rsp *BanAdminUserResponse, err error)
	CreateAdminUser(ctx context.Context, req *CreateAdminUserRequest, opts ...http.CallOption) (rsp *CreateAdminUserResponse, err error)
	DeleteAdminRole(ctx context.Context, req *DeleteAdminRoleRequest, opts ...http.CallOption) (rsp *DeleteAdminRoleResponse, err error)
	DeleteAdminUser(ctx context.Context, req *DeleteAdminUserRequest, opts ...http.CallOption) (rsp *DeleteAdminUserResponse, err error)
	GenerateTokenByCode(ctx context.Context, req *GenerateTokenByCodeRequest, opts ...http.CallOption) (rsp *GenerateTokenByCodeResponse, err error)
	ListAdminUser(ctx context.Context, req *ListAdminUserRequest, opts ...http.CallOption) (rsp *ListAdminUserResponse, err error)
	ListAuthLog(ctx context.Context, req *ListAuthLogRequest, opts ...http.CallOption) (rsp *ListAuthLogResponse, err error)
	Me(ctx context.Context, req *MeRequest, opts ...http.CallOption) (rsp *MeResponse, err error)
	RestoreAdminUser(ctx context.Context, req *RestoreAdminUserRequest, opts ...http.CallOption) (rsp *RestoreAdminUserResponse, err error)
	RetrieveAdminRoleResource(ctx context.Context, req *RetrieveAdminRoleResourceRequest, opts ...http.CallOption) (rsp *RetrieveAdminRoleResourceResponse, err error)
	SaveAdminRole(ctx context.Context, req *SaveAdminRoleRequest, opts ...http.CallOption) (rsp *SaveAdminRoleResponse, err error)
	SearchAdminRole(ctx context.Context, req *SearchAdminRoleRequest, opts ...http.CallOption) (rsp *SearchAdminRoleResponse, err error)
	SearchUserMdmInfo(ctx context.Context, req *SearchUserMdmInfoRequest, opts ...http.CallOption) (rsp *SearchUserMdmInfoResponse, err error)
	UpdateAdminUserRole(ctx context.Context, req *UpdateAdminUserRoleRequest, opts ...http.CallOption) (rsp *UpdateAdminUserRoleResponse, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) BanAdminUser(ctx context.Context, in *BanAdminUserRequest, opts ...http.CallOption) (*BanAdminUserResponse, error) {
	var out BanAdminUserResponse
	pattern := "/v1/auth/user/ban"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthBanAdminUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) CreateAdminUser(ctx context.Context, in *CreateAdminUserRequest, opts ...http.CallOption) (*CreateAdminUserResponse, error) {
	var out CreateAdminUserResponse
	pattern := "/v1/auth/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthCreateAdminUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteAdminRole(ctx context.Context, in *DeleteAdminRoleRequest, opts ...http.CallOption) (*DeleteAdminRoleResponse, error) {
	var out DeleteAdminRoleResponse
	pattern := "/v1/auth/role/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthDeleteAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserRequest, opts ...http.CallOption) (*DeleteAdminUserResponse, error) {
	var out DeleteAdminUserResponse
	pattern := "/v1/auth/user/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthDeleteAdminUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GenerateTokenByCode(ctx context.Context, in *GenerateTokenByCodeRequest, opts ...http.CallOption) (*GenerateTokenByCodeResponse, error) {
	var out GenerateTokenByCodeResponse
	pattern := "/v1/auth/generate_token_by_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGenerateTokenByCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListAdminUser(ctx context.Context, in *ListAdminUserRequest, opts ...http.CallOption) (*ListAdminUserResponse, error) {
	var out ListAdminUserResponse
	pattern := "/v1/auth/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthListAdminUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListAuthLog(ctx context.Context, in *ListAuthLogRequest, opts ...http.CallOption) (*ListAuthLogResponse, error) {
	var out ListAuthLogResponse
	pattern := "/v1/auth/log/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthListAuthLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) Me(ctx context.Context, in *MeRequest, opts ...http.CallOption) (*MeResponse, error) {
	var out MeResponse
	pattern := "/v1/auth/user/me"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthMe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) RestoreAdminUser(ctx context.Context, in *RestoreAdminUserRequest, opts ...http.CallOption) (*RestoreAdminUserResponse, error) {
	var out RestoreAdminUserResponse
	pattern := "/v1/auth/user/restore"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthRestoreAdminUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) RetrieveAdminRoleResource(ctx context.Context, in *RetrieveAdminRoleResourceRequest, opts ...http.CallOption) (*RetrieveAdminRoleResourceResponse, error) {
	var out RetrieveAdminRoleResourceResponse
	pattern := "/v1/auth/role/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthRetrieveAdminRoleResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) SaveAdminRole(ctx context.Context, in *SaveAdminRoleRequest, opts ...http.CallOption) (*SaveAdminRoleResponse, error) {
	var out SaveAdminRoleResponse
	pattern := "/v1/auth/role/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthSaveAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) SearchAdminRole(ctx context.Context, in *SearchAdminRoleRequest, opts ...http.CallOption) (*SearchAdminRoleResponse, error) {
	var out SearchAdminRoleResponse
	pattern := "/v1/auth/role/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthSearchAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) SearchUserMdmInfo(ctx context.Context, in *SearchUserMdmInfoRequest, opts ...http.CallOption) (*SearchUserMdmInfoResponse, error) {
	var out SearchUserMdmInfoResponse
	pattern := "/v1/auth/mdm/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthSearchUserMdmInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdateAdminUserRole(ctx context.Context, in *UpdateAdminUserRoleRequest, opts ...http.CallOption) (*UpdateAdminUserRoleResponse, error) {
	var out UpdateAdminUserRoleResponse
	pattern := "/v1/auth/user/assign_role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthUpdateAdminUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
