// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_GenerateTokenByCode_FullMethodName       = "/api.auth.Auth/GenerateTokenByCode"
	Auth_SearchUserMdmInfo_FullMethodName         = "/api.auth.Auth/SearchUserMdmInfo"
	Auth_Me_FullMethodName                        = "/api.auth.Auth/Me"
	Auth_ListAdminUser_FullMethodName             = "/api.auth.Auth/ListAdminUser"
	Auth_CreateAdminUser_FullMethodName           = "/api.auth.Auth/CreateAdminUser"
	Auth_DeleteAdminUser_FullMethodName           = "/api.auth.Auth/DeleteAdminUser"
	Auth_BanAdminUser_FullMethodName              = "/api.auth.Auth/BanAdminUser"
	Auth_RestoreAdminUser_FullMethodName          = "/api.auth.Auth/RestoreAdminUser"
	Auth_UpdateAdminUserRole_FullMethodName       = "/api.auth.Auth/UpdateAdminUserRole"
	Auth_SearchAdminRole_FullMethodName           = "/api.auth.Auth/SearchAdminRole"
	Auth_RetrieveAdminRoleResource_FullMethodName = "/api.auth.Auth/RetrieveAdminRoleResource"
	Auth_SaveAdminRole_FullMethodName             = "/api.auth.Auth/SaveAdminRole"
	Auth_DeleteAdminRole_FullMethodName           = "/api.auth.Auth/DeleteAdminRole"
	Auth_ListAuthLog_FullMethodName               = "/api.auth.Auth/ListAuthLog"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// 登陆，用sso code换取token
	GenerateTokenByCode(ctx context.Context, in *GenerateTokenByCodeRequest, opts ...grpc.CallOption) (*GenerateTokenByCodeResponse, error)
	// 在mbm系统模糊搜索用户信息
	SearchUserMdmInfo(ctx context.Context, in *SearchUserMdmInfoRequest, opts ...grpc.CallOption) (*SearchUserMdmInfoResponse, error)
	// 用户查看自己的权限
	Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error)
	// 拉取管理后台人员列表
	ListAdminUser(ctx context.Context, in *ListAdminUserRequest, opts ...grpc.CallOption) (*ListAdminUserResponse, error)
	// 管理后台新增人员, 无法编辑超管
	CreateAdminUser(ctx context.Context, in *CreateAdminUserRequest, opts ...grpc.CallOption) (*CreateAdminUserResponse, error)
	// 删除管理员，不能删除自己和超管
	DeleteAdminUser(ctx context.Context, in *DeleteAdminUserRequest, opts ...grpc.CallOption) (*DeleteAdminUserResponse, error)
	// 封禁管理员
	BanAdminUser(ctx context.Context, in *BanAdminUserRequest, opts ...grpc.CallOption) (*BanAdminUserResponse, error)
	// 解封管理员
	RestoreAdminUser(ctx context.Context, in *RestoreAdminUserRequest, opts ...grpc.CallOption) (*RestoreAdminUserResponse, error)
	// 管理后台给管理员分配角色，不能更改超管角色
	UpdateAdminUserRole(ctx context.Context, in *UpdateAdminUserRoleRequest, opts ...grpc.CallOption) (*UpdateAdminUserRoleResponse, error)
	// 管理后台角色列表
	SearchAdminRole(ctx context.Context, in *SearchAdminRoleRequest, opts ...grpc.CallOption) (*SearchAdminRoleResponse, error)
	// 管理后台角色的权限列表 仅用于查看角色的全部权限
	RetrieveAdminRoleResource(ctx context.Context, in *RetrieveAdminRoleResourceRequest, opts ...grpc.CallOption) (*RetrieveAdminRoleResourceResponse, error)
	// 管理后台新增/修改角色
	SaveAdminRole(ctx context.Context, in *SaveAdminRoleRequest, opts ...grpc.CallOption) (*SaveAdminRoleResponse, error)
	// 管理后台删除角色
	DeleteAdminRole(ctx context.Context, in *DeleteAdminRoleRequest, opts ...grpc.CallOption) (*DeleteAdminRoleResponse, error)
	// 查询权限管理日志
	ListAuthLog(ctx context.Context, in *ListAuthLogRequest, opts ...grpc.CallOption) (*ListAuthLogResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GenerateTokenByCode(ctx context.Context, in *GenerateTokenByCodeRequest, opts ...grpc.CallOption) (*GenerateTokenByCodeResponse, error) {
	out := new(GenerateTokenByCodeResponse)
	err := c.cc.Invoke(ctx, Auth_GenerateTokenByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SearchUserMdmInfo(ctx context.Context, in *SearchUserMdmInfoRequest, opts ...grpc.CallOption) (*SearchUserMdmInfoResponse, error) {
	out := new(SearchUserMdmInfoResponse)
	err := c.cc.Invoke(ctx, Auth_SearchUserMdmInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error) {
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, Auth_Me_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ListAdminUser(ctx context.Context, in *ListAdminUserRequest, opts ...grpc.CallOption) (*ListAdminUserResponse, error) {
	out := new(ListAdminUserResponse)
	err := c.cc.Invoke(ctx, Auth_ListAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateAdminUser(ctx context.Context, in *CreateAdminUserRequest, opts ...grpc.CallOption) (*CreateAdminUserResponse, error) {
	out := new(CreateAdminUserResponse)
	err := c.cc.Invoke(ctx, Auth_CreateAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserRequest, opts ...grpc.CallOption) (*DeleteAdminUserResponse, error) {
	out := new(DeleteAdminUserResponse)
	err := c.cc.Invoke(ctx, Auth_DeleteAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) BanAdminUser(ctx context.Context, in *BanAdminUserRequest, opts ...grpc.CallOption) (*BanAdminUserResponse, error) {
	out := new(BanAdminUserResponse)
	err := c.cc.Invoke(ctx, Auth_BanAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RestoreAdminUser(ctx context.Context, in *RestoreAdminUserRequest, opts ...grpc.CallOption) (*RestoreAdminUserResponse, error) {
	out := new(RestoreAdminUserResponse)
	err := c.cc.Invoke(ctx, Auth_RestoreAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateAdminUserRole(ctx context.Context, in *UpdateAdminUserRoleRequest, opts ...grpc.CallOption) (*UpdateAdminUserRoleResponse, error) {
	out := new(UpdateAdminUserRoleResponse)
	err := c.cc.Invoke(ctx, Auth_UpdateAdminUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SearchAdminRole(ctx context.Context, in *SearchAdminRoleRequest, opts ...grpc.CallOption) (*SearchAdminRoleResponse, error) {
	out := new(SearchAdminRoleResponse)
	err := c.cc.Invoke(ctx, Auth_SearchAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RetrieveAdminRoleResource(ctx context.Context, in *RetrieveAdminRoleResourceRequest, opts ...grpc.CallOption) (*RetrieveAdminRoleResourceResponse, error) {
	out := new(RetrieveAdminRoleResourceResponse)
	err := c.cc.Invoke(ctx, Auth_RetrieveAdminRoleResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SaveAdminRole(ctx context.Context, in *SaveAdminRoleRequest, opts ...grpc.CallOption) (*SaveAdminRoleResponse, error) {
	out := new(SaveAdminRoleResponse)
	err := c.cc.Invoke(ctx, Auth_SaveAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteAdminRole(ctx context.Context, in *DeleteAdminRoleRequest, opts ...grpc.CallOption) (*DeleteAdminRoleResponse, error) {
	out := new(DeleteAdminRoleResponse)
	err := c.cc.Invoke(ctx, Auth_DeleteAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ListAuthLog(ctx context.Context, in *ListAuthLogRequest, opts ...grpc.CallOption) (*ListAuthLogResponse, error) {
	out := new(ListAuthLogResponse)
	err := c.cc.Invoke(ctx, Auth_ListAuthLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// 登陆，用sso code换取token
	GenerateTokenByCode(context.Context, *GenerateTokenByCodeRequest) (*GenerateTokenByCodeResponse, error)
	// 在mbm系统模糊搜索用户信息
	SearchUserMdmInfo(context.Context, *SearchUserMdmInfoRequest) (*SearchUserMdmInfoResponse, error)
	// 用户查看自己的权限
	Me(context.Context, *MeRequest) (*MeResponse, error)
	// 拉取管理后台人员列表
	ListAdminUser(context.Context, *ListAdminUserRequest) (*ListAdminUserResponse, error)
	// 管理后台新增人员, 无法编辑超管
	CreateAdminUser(context.Context, *CreateAdminUserRequest) (*CreateAdminUserResponse, error)
	// 删除管理员，不能删除自己和超管
	DeleteAdminUser(context.Context, *DeleteAdminUserRequest) (*DeleteAdminUserResponse, error)
	// 封禁管理员
	BanAdminUser(context.Context, *BanAdminUserRequest) (*BanAdminUserResponse, error)
	// 解封管理员
	RestoreAdminUser(context.Context, *RestoreAdminUserRequest) (*RestoreAdminUserResponse, error)
	// 管理后台给管理员分配角色，不能更改超管角色
	UpdateAdminUserRole(context.Context, *UpdateAdminUserRoleRequest) (*UpdateAdminUserRoleResponse, error)
	// 管理后台角色列表
	SearchAdminRole(context.Context, *SearchAdminRoleRequest) (*SearchAdminRoleResponse, error)
	// 管理后台角色的权限列表 仅用于查看角色的全部权限
	RetrieveAdminRoleResource(context.Context, *RetrieveAdminRoleResourceRequest) (*RetrieveAdminRoleResourceResponse, error)
	// 管理后台新增/修改角色
	SaveAdminRole(context.Context, *SaveAdminRoleRequest) (*SaveAdminRoleResponse, error)
	// 管理后台删除角色
	DeleteAdminRole(context.Context, *DeleteAdminRoleRequest) (*DeleteAdminRoleResponse, error)
	// 查询权限管理日志
	ListAuthLog(context.Context, *ListAuthLogRequest) (*ListAuthLogResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) GenerateTokenByCode(context.Context, *GenerateTokenByCodeRequest) (*GenerateTokenByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTokenByCode not implemented")
}
func (UnimplementedAuthServer) SearchUserMdmInfo(context.Context, *SearchUserMdmInfoRequest) (*SearchUserMdmInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserMdmInfo not implemented")
}
func (UnimplementedAuthServer) Me(context.Context, *MeRequest) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedAuthServer) ListAdminUser(context.Context, *ListAdminUserRequest) (*ListAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminUser not implemented")
}
func (UnimplementedAuthServer) CreateAdminUser(context.Context, *CreateAdminUserRequest) (*CreateAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminUser not implemented")
}
func (UnimplementedAuthServer) DeleteAdminUser(context.Context, *DeleteAdminUserRequest) (*DeleteAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminUser not implemented")
}
func (UnimplementedAuthServer) BanAdminUser(context.Context, *BanAdminUserRequest) (*BanAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanAdminUser not implemented")
}
func (UnimplementedAuthServer) RestoreAdminUser(context.Context, *RestoreAdminUserRequest) (*RestoreAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAdminUser not implemented")
}
func (UnimplementedAuthServer) UpdateAdminUserRole(context.Context, *UpdateAdminUserRoleRequest) (*UpdateAdminUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminUserRole not implemented")
}
func (UnimplementedAuthServer) SearchAdminRole(context.Context, *SearchAdminRoleRequest) (*SearchAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAdminRole not implemented")
}
func (UnimplementedAuthServer) RetrieveAdminRoleResource(context.Context, *RetrieveAdminRoleResourceRequest) (*RetrieveAdminRoleResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAdminRoleResource not implemented")
}
func (UnimplementedAuthServer) SaveAdminRole(context.Context, *SaveAdminRoleRequest) (*SaveAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAdminRole not implemented")
}
func (UnimplementedAuthServer) DeleteAdminRole(context.Context, *DeleteAdminRoleRequest) (*DeleteAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminRole not implemented")
}
func (UnimplementedAuthServer) ListAuthLog(context.Context, *ListAuthLogRequest) (*ListAuthLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthLog not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_GenerateTokenByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GenerateTokenByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GenerateTokenByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GenerateTokenByCode(ctx, req.(*GenerateTokenByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SearchUserMdmInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserMdmInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SearchUserMdmInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SearchUserMdmInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SearchUserMdmInfo(ctx, req.(*SearchUserMdmInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Me_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Me(ctx, req.(*MeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ListAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ListAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ListAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ListAdminUser(ctx, req.(*ListAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateAdminUser(ctx, req.(*CreateAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeleteAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteAdminUser(ctx, req.(*DeleteAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_BanAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).BanAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_BanAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).BanAdminUser(ctx, req.(*BanAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RestoreAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RestoreAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RestoreAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RestoreAdminUser(ctx, req.(*RestoreAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateAdminUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateAdminUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UpdateAdminUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateAdminUserRole(ctx, req.(*UpdateAdminUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SearchAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SearchAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SearchAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SearchAdminRole(ctx, req.(*SearchAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RetrieveAdminRoleResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAdminRoleResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RetrieveAdminRoleResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RetrieveAdminRoleResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RetrieveAdminRoleResource(ctx, req.(*RetrieveAdminRoleResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SaveAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SaveAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SaveAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SaveAdminRole(ctx, req.(*SaveAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeleteAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteAdminRole(ctx, req.(*DeleteAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ListAuthLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ListAuthLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ListAuthLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ListAuthLog(ctx, req.(*ListAuthLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTokenByCode",
			Handler:    _Auth_GenerateTokenByCode_Handler,
		},
		{
			MethodName: "SearchUserMdmInfo",
			Handler:    _Auth_SearchUserMdmInfo_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _Auth_Me_Handler,
		},
		{
			MethodName: "ListAdminUser",
			Handler:    _Auth_ListAdminUser_Handler,
		},
		{
			MethodName: "CreateAdminUser",
			Handler:    _Auth_CreateAdminUser_Handler,
		},
		{
			MethodName: "DeleteAdminUser",
			Handler:    _Auth_DeleteAdminUser_Handler,
		},
		{
			MethodName: "BanAdminUser",
			Handler:    _Auth_BanAdminUser_Handler,
		},
		{
			MethodName: "RestoreAdminUser",
			Handler:    _Auth_RestoreAdminUser_Handler,
		},
		{
			MethodName: "UpdateAdminUserRole",
			Handler:    _Auth_UpdateAdminUserRole_Handler,
		},
		{
			MethodName: "SearchAdminRole",
			Handler:    _Auth_SearchAdminRole_Handler,
		},
		{
			MethodName: "RetrieveAdminRoleResource",
			Handler:    _Auth_RetrieveAdminRoleResource_Handler,
		},
		{
			MethodName: "SaveAdminRole",
			Handler:    _Auth_SaveAdminRole_Handler,
		},
		{
			MethodName: "DeleteAdminRole",
			Handler:    _Auth_DeleteAdminRole_Handler,
		},
		{
			MethodName: "ListAuthLog",
			Handler:    _Auth_ListAuthLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/auth/auth.proto",
}
