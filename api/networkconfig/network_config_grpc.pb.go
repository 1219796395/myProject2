// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/networkconfig/network_config.proto

package networkconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkConfig_GetNetworkConfigList_FullMethodName       = "/api.networkconfig.NetworkConfig/GetNetworkConfigList"
	NetworkConfig_CreateNetworkConfig_FullMethodName        = "/api.networkconfig.NetworkConfig/CreateNetworkConfig"
	NetworkConfig_DeleteNetworkConfig_FullMethodName        = "/api.networkconfig.NetworkConfig/DeleteNetworkConfig"
	NetworkConfig_UpdateNetworkConfig_FullMethodName        = "/api.networkconfig.NetworkConfig/UpdateNetworkConfig"
	NetworkConfig_PublishNetworkConfig_FullMethodName       = "/api.networkconfig.NetworkConfig/PublishNetworkConfig"
	NetworkConfig_CancelPublishNetworkConfig_FullMethodName = "/api.networkconfig.NetworkConfig/CancelPublishNetworkConfig"
	NetworkConfig_GetNetworkConfig_FullMethodName           = "/api.networkconfig.NetworkConfig/GetNetworkConfig"
)

// NetworkConfigClient is the client API for NetworkConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkConfigClient interface {
	// 1. 获取network_config列表：GetNetworkConfigList
	GetNetworkConfigList(ctx context.Context, in *GetNetworkConfigListReq, opts ...grpc.CallOption) (*GetNetworkConfigListRsp, error)
	// 2. 创建network_config：CreateNetworkConfig
	CreateNetworkConfig(ctx context.Context, in *CreateNetworkConfigReq, opts ...grpc.CallOption) (*CreateNetworkConfigRsp, error)
	// 3. 删除network_config：DeleteNetworkConfig
	DeleteNetworkConfig(ctx context.Context, in *DeleteNetworkConfigReq, opts ...grpc.CallOption) (*DeleteNetworkConfigRsp, error)
	// 4. 修改network_config：UpdateNetworkConfig
	UpdateNetworkConfig(ctx context.Context, in *UpdateNetworkConfigReq, opts ...grpc.CallOption) (*UpdateNetworkConfigRsp, error)
	// 5. 发布network_config：PublicNetworkConfig
	PublishNetworkConfig(ctx context.Context, in *PublishNetworkConfigReq, opts ...grpc.CallOption) (*PublishNetworkConfigRsp, error)
	// 6. 取消发布network_config：CancelPublishNetworkConfig
	CancelPublishNetworkConfig(ctx context.Context, in *CancelPublishNetworkConfigReq, opts ...grpc.CallOption) (*CancelPublishNetworkConfigRsp, error)
	// 7. C端公网获取单个network_config：GetNetworkConfig
	GetNetworkConfig(ctx context.Context, in *GetNetworkConfigReq, opts ...grpc.CallOption) (*GetNetworkConfigRsp, error)
}

type networkConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkConfigClient(cc grpc.ClientConnInterface) NetworkConfigClient {
	return &networkConfigClient{cc}
}

func (c *networkConfigClient) GetNetworkConfigList(ctx context.Context, in *GetNetworkConfigListReq, opts ...grpc.CallOption) (*GetNetworkConfigListRsp, error) {
	out := new(GetNetworkConfigListRsp)
	err := c.cc.Invoke(ctx, NetworkConfig_GetNetworkConfigList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) CreateNetworkConfig(ctx context.Context, in *CreateNetworkConfigReq, opts ...grpc.CallOption) (*CreateNetworkConfigRsp, error) {
	out := new(CreateNetworkConfigRsp)
	err := c.cc.Invoke(ctx, NetworkConfig_CreateNetworkConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) DeleteNetworkConfig(ctx context.Context, in *DeleteNetworkConfigReq, opts ...grpc.CallOption) (*DeleteNetworkConfigRsp, error) {
	out := new(DeleteNetworkConfigRsp)
	err := c.cc.Invoke(ctx, NetworkConfig_DeleteNetworkConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) UpdateNetworkConfig(ctx context.Context, in *UpdateNetworkConfigReq, opts ...grpc.CallOption) (*UpdateNetworkConfigRsp, error) {
	out := new(UpdateNetworkConfigRsp)
	err := c.cc.Invoke(ctx, NetworkConfig_UpdateNetworkConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) PublishNetworkConfig(ctx context.Context, in *PublishNetworkConfigReq, opts ...grpc.CallOption) (*PublishNetworkConfigRsp, error) {
	out := new(PublishNetworkConfigRsp)
	err := c.cc.Invoke(ctx, NetworkConfig_PublishNetworkConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) CancelPublishNetworkConfig(ctx context.Context, in *CancelPublishNetworkConfigReq, opts ...grpc.CallOption) (*CancelPublishNetworkConfigRsp, error) {
	out := new(CancelPublishNetworkConfigRsp)
	err := c.cc.Invoke(ctx, NetworkConfig_CancelPublishNetworkConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkConfigClient) GetNetworkConfig(ctx context.Context, in *GetNetworkConfigReq, opts ...grpc.CallOption) (*GetNetworkConfigRsp, error) {
	out := new(GetNetworkConfigRsp)
	err := c.cc.Invoke(ctx, NetworkConfig_GetNetworkConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkConfigServer is the server API for NetworkConfig service.
// All implementations must embed UnimplementedNetworkConfigServer
// for forward compatibility
type NetworkConfigServer interface {
	// 1. 获取network_config列表：GetNetworkConfigList
	GetNetworkConfigList(context.Context, *GetNetworkConfigListReq) (*GetNetworkConfigListRsp, error)
	// 2. 创建network_config：CreateNetworkConfig
	CreateNetworkConfig(context.Context, *CreateNetworkConfigReq) (*CreateNetworkConfigRsp, error)
	// 3. 删除network_config：DeleteNetworkConfig
	DeleteNetworkConfig(context.Context, *DeleteNetworkConfigReq) (*DeleteNetworkConfigRsp, error)
	// 4. 修改network_config：UpdateNetworkConfig
	UpdateNetworkConfig(context.Context, *UpdateNetworkConfigReq) (*UpdateNetworkConfigRsp, error)
	// 5. 发布network_config：PublicNetworkConfig
	PublishNetworkConfig(context.Context, *PublishNetworkConfigReq) (*PublishNetworkConfigRsp, error)
	// 6. 取消发布network_config：CancelPublishNetworkConfig
	CancelPublishNetworkConfig(context.Context, *CancelPublishNetworkConfigReq) (*CancelPublishNetworkConfigRsp, error)
	// 7. C端公网获取单个network_config：GetNetworkConfig
	GetNetworkConfig(context.Context, *GetNetworkConfigReq) (*GetNetworkConfigRsp, error)
	mustEmbedUnimplementedNetworkConfigServer()
}

// UnimplementedNetworkConfigServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkConfigServer struct {
}

func (UnimplementedNetworkConfigServer) GetNetworkConfigList(context.Context, *GetNetworkConfigListReq) (*GetNetworkConfigListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkConfigList not implemented")
}
func (UnimplementedNetworkConfigServer) CreateNetworkConfig(context.Context, *CreateNetworkConfigReq) (*CreateNetworkConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) DeleteNetworkConfig(context.Context, *DeleteNetworkConfigReq) (*DeleteNetworkConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) UpdateNetworkConfig(context.Context, *UpdateNetworkConfigReq) (*UpdateNetworkConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) PublishNetworkConfig(context.Context, *PublishNetworkConfigReq) (*PublishNetworkConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) CancelPublishNetworkConfig(context.Context, *CancelPublishNetworkConfigReq) (*CancelPublishNetworkConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPublishNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) GetNetworkConfig(context.Context, *GetNetworkConfigReq) (*GetNetworkConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkConfig not implemented")
}
func (UnimplementedNetworkConfigServer) mustEmbedUnimplementedNetworkConfigServer() {}

// UnsafeNetworkConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkConfigServer will
// result in compilation errors.
type UnsafeNetworkConfigServer interface {
	mustEmbedUnimplementedNetworkConfigServer()
}

func RegisterNetworkConfigServer(s grpc.ServiceRegistrar, srv NetworkConfigServer) {
	s.RegisterService(&NetworkConfig_ServiceDesc, srv)
}

func _NetworkConfig_GetNetworkConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).GetNetworkConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_GetNetworkConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).GetNetworkConfigList(ctx, req.(*GetNetworkConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_CreateNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).CreateNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_CreateNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).CreateNetworkConfig(ctx, req.(*CreateNetworkConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_DeleteNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).DeleteNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_DeleteNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).DeleteNetworkConfig(ctx, req.(*DeleteNetworkConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_UpdateNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).UpdateNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_UpdateNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).UpdateNetworkConfig(ctx, req.(*UpdateNetworkConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_PublishNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNetworkConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).PublishNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_PublishNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).PublishNetworkConfig(ctx, req.(*PublishNetworkConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_CancelPublishNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPublishNetworkConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).CancelPublishNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_CancelPublishNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).CancelPublishNetworkConfig(ctx, req.(*CancelPublishNetworkConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkConfig_GetNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigServer).GetNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkConfig_GetNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigServer).GetNetworkConfig(ctx, req.(*GetNetworkConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkConfig_ServiceDesc is the grpc.ServiceDesc for NetworkConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.networkconfig.NetworkConfig",
	HandlerType: (*NetworkConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkConfigList",
			Handler:    _NetworkConfig_GetNetworkConfigList_Handler,
		},
		{
			MethodName: "CreateNetworkConfig",
			Handler:    _NetworkConfig_CreateNetworkConfig_Handler,
		},
		{
			MethodName: "DeleteNetworkConfig",
			Handler:    _NetworkConfig_DeleteNetworkConfig_Handler,
		},
		{
			MethodName: "UpdateNetworkConfig",
			Handler:    _NetworkConfig_UpdateNetworkConfig_Handler,
		},
		{
			MethodName: "PublishNetworkConfig",
			Handler:    _NetworkConfig_PublishNetworkConfig_Handler,
		},
		{
			MethodName: "CancelPublishNetworkConfig",
			Handler:    _NetworkConfig_CancelPublishNetworkConfig_Handler,
		},
		{
			MethodName: "GetNetworkConfig",
			Handler:    _NetworkConfig_GetNetworkConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/networkconfig/network_config.proto",
}
