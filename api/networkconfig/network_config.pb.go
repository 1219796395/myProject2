// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: api/networkconfig/network_config.proto

package networkconfig

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 远程配置状态，枚举值
type NetworkConfigState int32

const (
	NetworkConfigState_NETWORK_CONFIG_UNKNOWN         NetworkConfigState = 0 // 占位
	NetworkConfigState_NETWORK_CONFIG_NEVER_PUBLISHED NetworkConfigState = 1 // 未发布
	NetworkConfigState_NETWORK_CONFIG_WAIT_PUBLISH    NetworkConfigState = 2 // 待发布
	NetworkConfigState_NETWORK_CONFIG_WAIT_AUDIT      NetworkConfigState = 3 //  待提审
	NetworkConfigState_NETWORK_CONFIG_AUDITING        NetworkConfigState = 4 //  提审中
	NetworkConfigState_NETWORK_CONFIG_WAIT_ONLINE     NetworkConfigState = 5 // 待上线
	NetworkConfigState_NETWORK_CONFIG_ONLINE          NetworkConfigState = 6 // 上线
	NetworkConfigState_NETWORK_CONFIG_EXPIRE          NetworkConfigState = 7 // 过期
	NetworkConfigState_NETWORK_CONFIG_DELETED         NetworkConfigState = 8 // 已删除，不会返回给前端，仅为数据库记录用
)

// Enum value maps for NetworkConfigState.
var (
	NetworkConfigState_name = map[int32]string{
		0: "NETWORK_CONFIG_UNKNOWN",
		1: "NETWORK_CONFIG_NEVER_PUBLISHED",
		2: "NETWORK_CONFIG_WAIT_PUBLISH",
		3: "NETWORK_CONFIG_WAIT_AUDIT",
		4: "NETWORK_CONFIG_AUDITING",
		5: "NETWORK_CONFIG_WAIT_ONLINE",
		6: "NETWORK_CONFIG_ONLINE",
		7: "NETWORK_CONFIG_EXPIRE",
		8: "NETWORK_CONFIG_DELETED",
	}
	NetworkConfigState_value = map[string]int32{
		"NETWORK_CONFIG_UNKNOWN":         0,
		"NETWORK_CONFIG_NEVER_PUBLISHED": 1,
		"NETWORK_CONFIG_WAIT_PUBLISH":    2,
		"NETWORK_CONFIG_WAIT_AUDIT":      3,
		"NETWORK_CONFIG_AUDITING":        4,
		"NETWORK_CONFIG_WAIT_ONLINE":     5,
		"NETWORK_CONFIG_ONLINE":          6,
		"NETWORK_CONFIG_EXPIRE":          7,
		"NETWORK_CONFIG_DELETED":         8,
	}
)

func (x NetworkConfigState) Enum() *NetworkConfigState {
	p := new(NetworkConfigState)
	*p = x
	return p
}

func (x NetworkConfigState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkConfigState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_networkconfig_network_config_proto_enumTypes[0].Descriptor()
}

func (NetworkConfigState) Type() protoreflect.EnumType {
	return &file_api_networkconfig_network_config_proto_enumTypes[0]
}

func (x NetworkConfigState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkConfigState.Descriptor instead.
func (NetworkConfigState) EnumDescriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{0}
}

// 版本号状态
type VersionState int32

const (
	VersionState_VERSION_UNKNOWN    VersionState = 0 // 占位
	VersionState_VERSION_ONLINE     VersionState = 1 // 在线状态，无需操作，返回在线配置
	VersionState_VERSION_EXPIRE     VersionState = 2 // 过期状态，需换包，返回在线配置
	VersionState_VERSION_NOT_ONLINE VersionState = 3 // 未上线状态，无需操作，返回提审or在线配置
)

// Enum value maps for VersionState.
var (
	VersionState_name = map[int32]string{
		0: "VERSION_UNKNOWN",
		1: "VERSION_ONLINE",
		2: "VERSION_EXPIRE",
		3: "VERSION_NOT_ONLINE",
	}
	VersionState_value = map[string]int32{
		"VERSION_UNKNOWN":    0,
		"VERSION_ONLINE":     1,
		"VERSION_EXPIRE":     2,
		"VERSION_NOT_ONLINE": 3,
	}
)

func (x VersionState) Enum() *VersionState {
	p := new(VersionState)
	*p = x
	return p
}

func (x VersionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_networkconfig_network_config_proto_enumTypes[1].Descriptor()
}

func (VersionState) Type() protoreflect.EnumType {
	return &file_api_networkconfig_network_config_proto_enumTypes[1]
}

func (x VersionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionState.Descriptor instead.
func (VersionState) EnumDescriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{1}
}

// 1. 获取network_config列表：GetNetworkConfigList
type GetNetworkConfigListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`      // 游戏分配的id
	Env      string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`           // 环境
	Channel  string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`   // 渠道
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"` // 平台
}

func (x *GetNetworkConfigListReq) Reset() {
	*x = GetNetworkConfigListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkConfigListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkConfigListReq) ProtoMessage() {}

func (x *GetNetworkConfigListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkConfigListReq.ProtoReflect.Descriptor instead.
func (*GetNetworkConfigListReq) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{0}
}

func (x *GetNetworkConfigListReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetNetworkConfigListReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetNetworkConfigListReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetNetworkConfigListReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type GetNetworkConfigListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfigs []*NetworkConfigDetail `protobuf:"bytes,1,rep,name=networkConfigs,proto3" json:"networkConfigs,omitempty"` // network_config列表
}

func (x *GetNetworkConfigListRsp) Reset() {
	*x = GetNetworkConfigListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkConfigListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkConfigListRsp) ProtoMessage() {}

func (x *GetNetworkConfigListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkConfigListRsp.ProtoReflect.Descriptor instead.
func (*GetNetworkConfigListRsp) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{1}
}

func (x *GetNetworkConfigListRsp) GetNetworkConfigs() []*NetworkConfigDetail {
	if x != nil {
		return x.NetworkConfigs
	}
	return nil
}

type NetworkConfigDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`               // 游戏分配的id
	Env          string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                    // 环境
	Channel      string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`            // 渠道
	Platform     string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`          // 平台
	Version      string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`            // 完整版本号
	State        uint32 `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`               // 配置状态，1:未发布，2:待发布，3:待提审，4:提审中，5:待上线，6:已上线，7:过期，（8:已删除，不会返回给前端）
	AuditStart   uint64 `protobuf:"varint,7,opt,name=auditStart,proto3" json:"auditStart,omitempty"`     //  提审开始时间，毫秒
	AuditEnd     uint64 `protobuf:"varint,8,opt,name=auditEnd,proto3" json:"auditEnd,omitempty"`         //  提审结束时间，毫秒
	OnlineStart  uint64 `protobuf:"varint,9,opt,name=onlineStart,proto3" json:"onlineStart,omitempty"`   // 上线开始时间，毫秒
	OnlineConfig string `protobuf:"bytes,10,opt,name=onlineConfig,proto3" json:"onlineConfig,omitempty"` //  线上配置列表，json格式
	AuditConfig  string `protobuf:"bytes,11,opt,name=auditConfig,proto3" json:"auditConfig,omitempty"`   // 提审配置，json格式
	Operator     string `protobuf:"bytes,12,opt,name=operator,proto3" json:"operator,omitempty"`         // 操作人
	UpdateTime   uint64 `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`    //  修改时间，毫秒
}

func (x *NetworkConfigDetail) Reset() {
	*x = NetworkConfigDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfigDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfigDetail) ProtoMessage() {}

func (x *NetworkConfigDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfigDetail.ProtoReflect.Descriptor instead.
func (*NetworkConfigDetail) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkConfigDetail) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *NetworkConfigDetail) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *NetworkConfigDetail) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *NetworkConfigDetail) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *NetworkConfigDetail) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NetworkConfigDetail) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *NetworkConfigDetail) GetAuditStart() uint64 {
	if x != nil {
		return x.AuditStart
	}
	return 0
}

func (x *NetworkConfigDetail) GetAuditEnd() uint64 {
	if x != nil {
		return x.AuditEnd
	}
	return 0
}

func (x *NetworkConfigDetail) GetOnlineStart() uint64 {
	if x != nil {
		return x.OnlineStart
	}
	return 0
}

func (x *NetworkConfigDetail) GetOnlineConfig() string {
	if x != nil {
		return x.OnlineConfig
	}
	return ""
}

func (x *NetworkConfigDetail) GetAuditConfig() string {
	if x != nil {
		return x.AuditConfig
	}
	return ""
}

func (x *NetworkConfigDetail) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *NetworkConfigDetail) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 2. 创建network_config：CreateNetworkConfig
type CreateNetworkConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`               // 游戏分配的id
	Env          string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                    // 环境
	Channel      string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`            // 渠道
	Platform     string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`          // 平台
	MajorVersion uint32 `protobuf:"varint,5,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"` // 大版本号
	MinorVersion uint32 `protobuf:"varint,6,opt,name=minorVersion,proto3" json:"minorVersion,omitempty"` // 小版本号
	AuditStart   uint64 `protobuf:"varint,7,opt,name=auditStart,proto3" json:"auditStart,omitempty"`     //  提审开始时间，毫秒
	AuditEnd     uint64 `protobuf:"varint,8,opt,name=auditEnd,proto3" json:"auditEnd,omitempty"`         //  提审结束时间，毫秒
	OnlineStart  uint64 `protobuf:"varint,9,opt,name=onlineStart,proto3" json:"onlineStart,omitempty"`   // 上线开始时间，毫秒
	OnlineConfig string `protobuf:"bytes,10,opt,name=onlineConfig,proto3" json:"onlineConfig,omitempty"` //  线上配置列表，json格式
	AuditConfig  string `protobuf:"bytes,11,opt,name=auditConfig,proto3" json:"auditConfig,omitempty"`   // 提审配置，json格式
	Operator     string `protobuf:"bytes,12,opt,name=operator,proto3" json:"operator,omitempty"`         // 操作人
}

func (x *CreateNetworkConfigReq) Reset() {
	*x = CreateNetworkConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkConfigReq) ProtoMessage() {}

func (x *CreateNetworkConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkConfigReq.ProtoReflect.Descriptor instead.
func (*CreateNetworkConfigReq) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNetworkConfigReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateNetworkConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CreateNetworkConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CreateNetworkConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CreateNetworkConfigReq) GetMajorVersion() uint32 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *CreateNetworkConfigReq) GetMinorVersion() uint32 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

func (x *CreateNetworkConfigReq) GetAuditStart() uint64 {
	if x != nil {
		return x.AuditStart
	}
	return 0
}

func (x *CreateNetworkConfigReq) GetAuditEnd() uint64 {
	if x != nil {
		return x.AuditEnd
	}
	return 0
}

func (x *CreateNetworkConfigReq) GetOnlineStart() uint64 {
	if x != nil {
		return x.OnlineStart
	}
	return 0
}

func (x *CreateNetworkConfigReq) GetOnlineConfig() string {
	if x != nil {
		return x.OnlineConfig
	}
	return ""
}

func (x *CreateNetworkConfigReq) GetAuditConfig() string {
	if x != nil {
		return x.AuditConfig
	}
	return ""
}

func (x *CreateNetworkConfigReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type CreateNetworkConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConfig *NetworkConfigDetail `protobuf:"bytes,1,opt,name=networkConfig,proto3" json:"networkConfig,omitempty"` // 创建后的networkConfig
}

func (x *CreateNetworkConfigRsp) Reset() {
	*x = CreateNetworkConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkConfigRsp) ProtoMessage() {}

func (x *CreateNetworkConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkConfigRsp.ProtoReflect.Descriptor instead.
func (*CreateNetworkConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNetworkConfigRsp) GetNetworkConfig() *NetworkConfigDetail {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

// 3.删除network_config：DeleteNetworkConfig
type DeleteNetworkConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`           // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	Version    string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`        // 完整版本号
	Operator   string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`      // 操作人
	UpdateTime uint64 `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *DeleteNetworkConfigReq) Reset() {
	*x = DeleteNetworkConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNetworkConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkConfigReq) ProtoMessage() {}

func (x *DeleteNetworkConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkConfigReq.ProtoReflect.Descriptor instead.
func (*DeleteNetworkConfigReq) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteNetworkConfigReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *DeleteNetworkConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *DeleteNetworkConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *DeleteNetworkConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeleteNetworkConfigReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeleteNetworkConfigReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DeleteNetworkConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type DeleteNetworkConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNetworkConfigRsp) Reset() {
	*x = DeleteNetworkConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNetworkConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkConfigRsp) ProtoMessage() {}

func (x *DeleteNetworkConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkConfigRsp.ProtoReflect.Descriptor instead.
func (*DeleteNetworkConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{6}
}

// 4. 修改network_config：UpdateNetworkConfig
type UpdateNetworkConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`              // 游戏分配的id
	Env          string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                   // 环境
	Channel      string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`           // 渠道
	Platform     string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`         // 平台
	Version      string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`           // 完整版本号
	AuditStart   uint64 `protobuf:"varint,6,opt,name=auditStart,proto3" json:"auditStart,omitempty"`    //  提审开始时间，毫秒，传0表示删除
	AuditEnd     uint64 `protobuf:"varint,7,opt,name=auditEnd,proto3" json:"auditEnd,omitempty"`        //  提审结束时间，毫秒，传0表示删除
	OnlineStart  uint64 `protobuf:"varint,8,opt,name=onlineStart,proto3" json:"onlineStart,omitempty"`  // 上线开始时间，毫秒
	OnlineConfig string `protobuf:"bytes,9,opt,name=onlineConfig,proto3" json:"onlineConfig,omitempty"` //  线上配置列表，json格式
	AuditConfig  string `protobuf:"bytes,10,opt,name=auditConfig,proto3" json:"auditConfig,omitempty"`  // 提审配置，json格式
	Operator     string `protobuf:"bytes,11,opt,name=operator,proto3" json:"operator,omitempty"`        // 操作人
	UpdateTime   uint64 `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`   //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *UpdateNetworkConfigReq) Reset() {
	*x = UpdateNetworkConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkConfigReq) ProtoMessage() {}

func (x *UpdateNetworkConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateNetworkConfigReq) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNetworkConfigReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *UpdateNetworkConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *UpdateNetworkConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpdateNetworkConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpdateNetworkConfigReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateNetworkConfigReq) GetAuditStart() uint64 {
	if x != nil {
		return x.AuditStart
	}
	return 0
}

func (x *UpdateNetworkConfigReq) GetAuditEnd() uint64 {
	if x != nil {
		return x.AuditEnd
	}
	return 0
}

func (x *UpdateNetworkConfigReq) GetOnlineStart() uint64 {
	if x != nil {
		return x.OnlineStart
	}
	return 0
}

func (x *UpdateNetworkConfigReq) GetOnlineConfig() string {
	if x != nil {
		return x.OnlineConfig
	}
	return ""
}

func (x *UpdateNetworkConfigReq) GetAuditConfig() string {
	if x != nil {
		return x.AuditConfig
	}
	return ""
}

func (x *UpdateNetworkConfigReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UpdateNetworkConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpdateNetworkConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNetworkConfigRsp) Reset() {
	*x = UpdateNetworkConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkConfigRsp) ProtoMessage() {}

func (x *UpdateNetworkConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkConfigRsp.ProtoReflect.Descriptor instead.
func (*UpdateNetworkConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{8}
}

// 5. 发布network_config：PublishNetworkConfig
type PublishNetworkConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`           // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	Version    string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`        // 完整版本号
	Operator   string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`      // 操作人
	UpdateTime uint64 `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //  该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *PublishNetworkConfigReq) Reset() {
	*x = PublishNetworkConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNetworkConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNetworkConfigReq) ProtoMessage() {}

func (x *PublishNetworkConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNetworkConfigReq.ProtoReflect.Descriptor instead.
func (*PublishNetworkConfigReq) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{9}
}

func (x *PublishNetworkConfigReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *PublishNetworkConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *PublishNetworkConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PublishNetworkConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PublishNetworkConfigReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PublishNetworkConfigReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PublishNetworkConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type PublishNetworkConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishNetworkConfigRsp) Reset() {
	*x = PublishNetworkConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNetworkConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNetworkConfigRsp) ProtoMessage() {}

func (x *PublishNetworkConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNetworkConfigRsp.ProtoReflect.Descriptor instead.
func (*PublishNetworkConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{10}
}

// 6. 取消发布network_config：CancelPublishNetworkConfig
type CancelPublishNetworkConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`           // 游戏分配的id
	Env        string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`                // 环境
	Channel    string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`        // 渠道
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`      // 平台
	Version    string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`        // 完整版本号
	Operator   string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`      // 操作人
	UpdateTime uint64 `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"` // 该条配置上次返回的修改时间，若从未返回过则无需填写
}

func (x *CancelPublishNetworkConfigReq) Reset() {
	*x = CancelPublishNetworkConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPublishNetworkConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPublishNetworkConfigReq) ProtoMessage() {}

func (x *CancelPublishNetworkConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPublishNetworkConfigReq.ProtoReflect.Descriptor instead.
func (*CancelPublishNetworkConfigReq) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{11}
}

func (x *CancelPublishNetworkConfigReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CancelPublishNetworkConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CancelPublishNetworkConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CancelPublishNetworkConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CancelPublishNetworkConfigReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CancelPublishNetworkConfigReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CancelPublishNetworkConfigReq) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CancelPublishNetworkConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelPublishNetworkConfigRsp) Reset() {
	*x = CancelPublishNetworkConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPublishNetworkConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPublishNetworkConfigRsp) ProtoMessage() {}

func (x *CancelPublishNetworkConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPublishNetworkConfigRsp.ProtoReflect.Descriptor instead.
func (*CancelPublishNetworkConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{12}
}

// 7. C端公网获取单个network_config：GetNetworkConfig
type GetNetworkConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    uint32 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`      // 游戏分配的id
	Env      string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`           // 环境
	Channel  string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`   // 渠道
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"` // 平台
	Version  string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`   // 本地的完整版本号
}

func (x *GetNetworkConfigReq) Reset() {
	*x = GetNetworkConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkConfigReq) ProtoMessage() {}

func (x *GetNetworkConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkConfigReq.ProtoReflect.Descriptor instead.
func (*GetNetworkConfigReq) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{13}
}

func (x *GetNetworkConfigReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetNetworkConfigReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetNetworkConfigReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetNetworkConfigReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetNetworkConfigReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetNetworkConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionState uint32 `protobuf:"varint,1,opt,name=versionState,proto3" json:"versionState,omitempty"` // 版本号状态，1:在线，2:过期，3:未上线
	ConfigData   string `protobuf:"bytes,2,opt,name=configData,proto3" json:"configData,omitempty"`      // 配置信息列表，是json类型
}

func (x *GetNetworkConfigRsp) Reset() {
	*x = GetNetworkConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_networkconfig_network_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkConfigRsp) ProtoMessage() {}

func (x *GetNetworkConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_networkconfig_network_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkConfigRsp.ProtoReflect.Descriptor instead.
func (*GetNetworkConfigRsp) Descriptor() ([]byte, []int) {
	return file_api_networkconfig_network_config_proto_rawDescGZIP(), []int{14}
}

func (x *GetNetworkConfigRsp) GetVersionState() uint32 {
	if x != nil {
		return x.VersionState
	}
	return 0
}

func (x *GetNetworkConfigRsp) GetConfigData() string {
	if x != nil {
		return x.ConfigData
	}
	return ""
}

var File_api_networkconfig_network_config_proto protoreflect.FileDescriptor

var file_api_networkconfig_network_config_proto_rawDesc = []byte{
	0x0a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x83, 0x03,
	0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x4c,
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xcc, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0xf0, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x73, 0x70, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0xd3, 0x01,
	0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x73, 0x70, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2a,
	0xa3, 0x02, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x63, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x32, 0xdb, 0x09, 0x0a, 0x0d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa8, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x38, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a,
	0x22, 0x2b, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa3, 0x01,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73,
	0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xc0, 0x01, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01,
	0x2a, 0x22, 0x33, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbf, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x5b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x55, 0x12, 0x53, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x7b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x61, 0x6d, 0x65,
	0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_networkconfig_network_config_proto_rawDescOnce sync.Once
	file_api_networkconfig_network_config_proto_rawDescData = file_api_networkconfig_network_config_proto_rawDesc
)

func file_api_networkconfig_network_config_proto_rawDescGZIP() []byte {
	file_api_networkconfig_network_config_proto_rawDescOnce.Do(func() {
		file_api_networkconfig_network_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_networkconfig_network_config_proto_rawDescData)
	})
	return file_api_networkconfig_network_config_proto_rawDescData
}

var file_api_networkconfig_network_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_networkconfig_network_config_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_networkconfig_network_config_proto_goTypes = []interface{}{
	(NetworkConfigState)(0),               // 0: api.networkconfig.NetworkConfigState
	(VersionState)(0),                     // 1: api.networkconfig.VersionState
	(*GetNetworkConfigListReq)(nil),       // 2: api.networkconfig.GetNetworkConfigListReq
	(*GetNetworkConfigListRsp)(nil),       // 3: api.networkconfig.GetNetworkConfigListRsp
	(*NetworkConfigDetail)(nil),           // 4: api.networkconfig.NetworkConfigDetail
	(*CreateNetworkConfigReq)(nil),        // 5: api.networkconfig.CreateNetworkConfigReq
	(*CreateNetworkConfigRsp)(nil),        // 6: api.networkconfig.CreateNetworkConfigRsp
	(*DeleteNetworkConfigReq)(nil),        // 7: api.networkconfig.DeleteNetworkConfigReq
	(*DeleteNetworkConfigRsp)(nil),        // 8: api.networkconfig.DeleteNetworkConfigRsp
	(*UpdateNetworkConfigReq)(nil),        // 9: api.networkconfig.UpdateNetworkConfigReq
	(*UpdateNetworkConfigRsp)(nil),        // 10: api.networkconfig.UpdateNetworkConfigRsp
	(*PublishNetworkConfigReq)(nil),       // 11: api.networkconfig.PublishNetworkConfigReq
	(*PublishNetworkConfigRsp)(nil),       // 12: api.networkconfig.PublishNetworkConfigRsp
	(*CancelPublishNetworkConfigReq)(nil), // 13: api.networkconfig.CancelPublishNetworkConfigReq
	(*CancelPublishNetworkConfigRsp)(nil), // 14: api.networkconfig.CancelPublishNetworkConfigRsp
	(*GetNetworkConfigReq)(nil),           // 15: api.networkconfig.GetNetworkConfigReq
	(*GetNetworkConfigRsp)(nil),           // 16: api.networkconfig.GetNetworkConfigRsp
}
var file_api_networkconfig_network_config_proto_depIdxs = []int32{
	4,  // 0: api.networkconfig.GetNetworkConfigListRsp.networkConfigs:type_name -> api.networkconfig.NetworkConfigDetail
	4,  // 1: api.networkconfig.CreateNetworkConfigRsp.networkConfig:type_name -> api.networkconfig.NetworkConfigDetail
	2,  // 2: api.networkconfig.NetworkConfig.GetNetworkConfigList:input_type -> api.networkconfig.GetNetworkConfigListReq
	5,  // 3: api.networkconfig.NetworkConfig.CreateNetworkConfig:input_type -> api.networkconfig.CreateNetworkConfigReq
	7,  // 4: api.networkconfig.NetworkConfig.DeleteNetworkConfig:input_type -> api.networkconfig.DeleteNetworkConfigReq
	9,  // 5: api.networkconfig.NetworkConfig.UpdateNetworkConfig:input_type -> api.networkconfig.UpdateNetworkConfigReq
	11, // 6: api.networkconfig.NetworkConfig.PublishNetworkConfig:input_type -> api.networkconfig.PublishNetworkConfigReq
	13, // 7: api.networkconfig.NetworkConfig.CancelPublishNetworkConfig:input_type -> api.networkconfig.CancelPublishNetworkConfigReq
	15, // 8: api.networkconfig.NetworkConfig.GetNetworkConfig:input_type -> api.networkconfig.GetNetworkConfigReq
	3,  // 9: api.networkconfig.NetworkConfig.GetNetworkConfigList:output_type -> api.networkconfig.GetNetworkConfigListRsp
	6,  // 10: api.networkconfig.NetworkConfig.CreateNetworkConfig:output_type -> api.networkconfig.CreateNetworkConfigRsp
	8,  // 11: api.networkconfig.NetworkConfig.DeleteNetworkConfig:output_type -> api.networkconfig.DeleteNetworkConfigRsp
	10, // 12: api.networkconfig.NetworkConfig.UpdateNetworkConfig:output_type -> api.networkconfig.UpdateNetworkConfigRsp
	12, // 13: api.networkconfig.NetworkConfig.PublishNetworkConfig:output_type -> api.networkconfig.PublishNetworkConfigRsp
	14, // 14: api.networkconfig.NetworkConfig.CancelPublishNetworkConfig:output_type -> api.networkconfig.CancelPublishNetworkConfigRsp
	16, // 15: api.networkconfig.NetworkConfig.GetNetworkConfig:output_type -> api.networkconfig.GetNetworkConfigRsp
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_api_networkconfig_network_config_proto_init() }
func file_api_networkconfig_network_config_proto_init() {
	if File_api_networkconfig_network_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_networkconfig_network_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkConfigListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkConfigListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfigDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNetworkConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNetworkConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNetworkConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNetworkConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPublishNetworkConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPublishNetworkConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_networkconfig_network_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_networkconfig_network_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_networkconfig_network_config_proto_goTypes,
		DependencyIndexes: file_api_networkconfig_network_config_proto_depIdxs,
		EnumInfos:         file_api_networkconfig_network_config_proto_enumTypes,
		MessageInfos:      file_api_networkconfig_network_config_proto_msgTypes,
	}.Build()
	File_api_networkconfig_network_config_proto = out.File
	file_api_networkconfig_network_config_proto_rawDesc = nil
	file_api_networkconfig_network_config_proto_goTypes = nil
	file_api_networkconfig_network_config_proto_depIdxs = nil
}
