// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: api/networkconfig/network_config.proto

package networkconfig

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNetworkConfigCancelPublishNetworkConfig = "/api.networkconfig.NetworkConfig/CancelPublishNetworkConfig"
const OperationNetworkConfigCreateNetworkConfig = "/api.networkconfig.NetworkConfig/CreateNetworkConfig"
const OperationNetworkConfigDeleteNetworkConfig = "/api.networkconfig.NetworkConfig/DeleteNetworkConfig"
const OperationNetworkConfigGetNetworkConfig = "/api.networkconfig.NetworkConfig/GetNetworkConfig"
const OperationNetworkConfigGetNetworkConfigList = "/api.networkconfig.NetworkConfig/GetNetworkConfigList"
const OperationNetworkConfigPublishNetworkConfig = "/api.networkconfig.NetworkConfig/PublishNetworkConfig"
const OperationNetworkConfigUpdateNetworkConfig = "/api.networkconfig.NetworkConfig/UpdateNetworkConfig"

type NetworkConfigHTTPServer interface {
	// CancelPublishNetworkConfig 6. 取消发布network_config：CancelPublishNetworkConfig
	CancelPublishNetworkConfig(context.Context, *CancelPublishNetworkConfigReq) (*CancelPublishNetworkConfigRsp, error)
	// CreateNetworkConfig 2. 创建network_config：CreateNetworkConfig
	CreateNetworkConfig(context.Context, *CreateNetworkConfigReq) (*CreateNetworkConfigRsp, error)
	// DeleteNetworkConfig 3. 删除network_config：DeleteNetworkConfig
	DeleteNetworkConfig(context.Context, *DeleteNetworkConfigReq) (*DeleteNetworkConfigRsp, error)
	// GetNetworkConfig 7. C端公网获取单个network_config：GetNetworkConfig
	GetNetworkConfig(context.Context, *GetNetworkConfigReq) (*GetNetworkConfigRsp, error)
	// GetNetworkConfigList 1. 获取network_config列表：GetNetworkConfigList
	GetNetworkConfigList(context.Context, *GetNetworkConfigListReq) (*GetNetworkConfigListRsp, error)
	// PublishNetworkConfig 5. 发布network_config：PublicNetworkConfig
	PublishNetworkConfig(context.Context, *PublishNetworkConfigReq) (*PublishNetworkConfigRsp, error)
	// UpdateNetworkConfig 4. 修改network_config：UpdateNetworkConfig
	UpdateNetworkConfig(context.Context, *UpdateNetworkConfigReq) (*UpdateNetworkConfigRsp, error)
}

func RegisterNetworkConfigHTTPServer(s *http.Server, srv NetworkConfigHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/network_config/get_network_config_list", _NetworkConfig_GetNetworkConfigList0_HTTP_Handler(srv))
	r.POST("/admin/network_config/create_network_config", _NetworkConfig_CreateNetworkConfig0_HTTP_Handler(srv))
	r.POST("/admin/network_config/delete_network_config", _NetworkConfig_DeleteNetworkConfig0_HTTP_Handler(srv))
	r.POST("/admin/network_config/update_network_config", _NetworkConfig_UpdateNetworkConfig0_HTTP_Handler(srv))
	r.POST("/admin/network_config/publish_network_config", _NetworkConfig_PublishNetworkConfig0_HTTP_Handler(srv))
	r.POST("/admin/network_config/cancel_publish_network_config", _NetworkConfig_CancelPublishNetworkConfig0_HTTP_Handler(srv))
	r.GET("/api/network_config/get_network_config/{appId}/{env}/{channel}/{platform}/{version}", _NetworkConfig_GetNetworkConfig0_HTTP_Handler(srv))
}

func _NetworkConfig_GetNetworkConfigList0_HTTP_Handler(srv NetworkConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNetworkConfigListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetworkConfigGetNetworkConfigList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNetworkConfigList(ctx, req.(*GetNetworkConfigListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNetworkConfigListRsp)
		return ctx.Result(200, reply)
	}
}

func _NetworkConfig_CreateNetworkConfig0_HTTP_Handler(srv NetworkConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNetworkConfigReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetworkConfigCreateNetworkConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNetworkConfig(ctx, req.(*CreateNetworkConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNetworkConfigRsp)
		return ctx.Result(200, reply)
	}
}

func _NetworkConfig_DeleteNetworkConfig0_HTTP_Handler(srv NetworkConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNetworkConfigReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetworkConfigDeleteNetworkConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNetworkConfig(ctx, req.(*DeleteNetworkConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNetworkConfigRsp)
		return ctx.Result(200, reply)
	}
}

func _NetworkConfig_UpdateNetworkConfig0_HTTP_Handler(srv NetworkConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNetworkConfigReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetworkConfigUpdateNetworkConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNetworkConfig(ctx, req.(*UpdateNetworkConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNetworkConfigRsp)
		return ctx.Result(200, reply)
	}
}

func _NetworkConfig_PublishNetworkConfig0_HTTP_Handler(srv NetworkConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PublishNetworkConfigReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetworkConfigPublishNetworkConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PublishNetworkConfig(ctx, req.(*PublishNetworkConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PublishNetworkConfigRsp)
		return ctx.Result(200, reply)
	}
}

func _NetworkConfig_CancelPublishNetworkConfig0_HTTP_Handler(srv NetworkConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelPublishNetworkConfigReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetworkConfigCancelPublishNetworkConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelPublishNetworkConfig(ctx, req.(*CancelPublishNetworkConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelPublishNetworkConfigRsp)
		return ctx.Result(200, reply)
	}
}

func _NetworkConfig_GetNetworkConfig0_HTTP_Handler(srv NetworkConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNetworkConfigReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetworkConfigGetNetworkConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNetworkConfig(ctx, req.(*GetNetworkConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNetworkConfigRsp)
		return ctx.Result(200, reply)
	}
}

type NetworkConfigHTTPClient interface {
	CancelPublishNetworkConfig(ctx context.Context, req *CancelPublishNetworkConfigReq, opts ...http.CallOption) (rsp *CancelPublishNetworkConfigRsp, err error)
	CreateNetworkConfig(ctx context.Context, req *CreateNetworkConfigReq, opts ...http.CallOption) (rsp *CreateNetworkConfigRsp, err error)
	DeleteNetworkConfig(ctx context.Context, req *DeleteNetworkConfigReq, opts ...http.CallOption) (rsp *DeleteNetworkConfigRsp, err error)
	GetNetworkConfig(ctx context.Context, req *GetNetworkConfigReq, opts ...http.CallOption) (rsp *GetNetworkConfigRsp, err error)
	GetNetworkConfigList(ctx context.Context, req *GetNetworkConfigListReq, opts ...http.CallOption) (rsp *GetNetworkConfigListRsp, err error)
	PublishNetworkConfig(ctx context.Context, req *PublishNetworkConfigReq, opts ...http.CallOption) (rsp *PublishNetworkConfigRsp, err error)
	UpdateNetworkConfig(ctx context.Context, req *UpdateNetworkConfigReq, opts ...http.CallOption) (rsp *UpdateNetworkConfigRsp, err error)
}

type NetworkConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewNetworkConfigHTTPClient(client *http.Client) NetworkConfigHTTPClient {
	return &NetworkConfigHTTPClientImpl{client}
}

func (c *NetworkConfigHTTPClientImpl) CancelPublishNetworkConfig(ctx context.Context, in *CancelPublishNetworkConfigReq, opts ...http.CallOption) (*CancelPublishNetworkConfigRsp, error) {
	var out CancelPublishNetworkConfigRsp
	pattern := "/admin/network_config/cancel_publish_network_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNetworkConfigCancelPublishNetworkConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetworkConfigHTTPClientImpl) CreateNetworkConfig(ctx context.Context, in *CreateNetworkConfigReq, opts ...http.CallOption) (*CreateNetworkConfigRsp, error) {
	var out CreateNetworkConfigRsp
	pattern := "/admin/network_config/create_network_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNetworkConfigCreateNetworkConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetworkConfigHTTPClientImpl) DeleteNetworkConfig(ctx context.Context, in *DeleteNetworkConfigReq, opts ...http.CallOption) (*DeleteNetworkConfigRsp, error) {
	var out DeleteNetworkConfigRsp
	pattern := "/admin/network_config/delete_network_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNetworkConfigDeleteNetworkConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetworkConfigHTTPClientImpl) GetNetworkConfig(ctx context.Context, in *GetNetworkConfigReq, opts ...http.CallOption) (*GetNetworkConfigRsp, error) {
	var out GetNetworkConfigRsp
	pattern := "/api/network_config/get_network_config/{appId}/{env}/{channel}/{platform}/{version}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNetworkConfigGetNetworkConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetworkConfigHTTPClientImpl) GetNetworkConfigList(ctx context.Context, in *GetNetworkConfigListReq, opts ...http.CallOption) (*GetNetworkConfigListRsp, error) {
	var out GetNetworkConfigListRsp
	pattern := "/admin/network_config/get_network_config_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNetworkConfigGetNetworkConfigList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetworkConfigHTTPClientImpl) PublishNetworkConfig(ctx context.Context, in *PublishNetworkConfigReq, opts ...http.CallOption) (*PublishNetworkConfigRsp, error) {
	var out PublishNetworkConfigRsp
	pattern := "/admin/network_config/publish_network_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNetworkConfigPublishNetworkConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetworkConfigHTTPClientImpl) UpdateNetworkConfig(ctx context.Context, in *UpdateNetworkConfigReq, opts ...http.CallOption) (*UpdateNetworkConfigRsp, error) {
	var out UpdateNetworkConfigRsp
	pattern := "/admin/network_config/update_network_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNetworkConfigUpdateNetworkConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
