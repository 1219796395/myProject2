// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: api/projectconfig/envmanage/env_manage.proto

package envmanage

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEnvManageCreateEnv = "/api.projectconfig.envmanage.EnvManage/CreateEnv"
const OperationEnvManageDeleteEnv = "/api.projectconfig.envmanage.EnvManage/DeleteEnv"
const OperationEnvManageGetEnvList = "/api.projectconfig.envmanage.EnvManage/GetEnvList"
const OperationEnvManageUpdateEnv = "/api.projectconfig.envmanage.EnvManage/UpdateEnv"

type EnvManageHTTPServer interface {
	// CreateEnv 2. 创建环境：CreateEnv
	CreateEnv(context.Context, *CreateEnvReq) (*CreateEnvRsp, error)
	// DeleteEnv 3. 删除环境：DeleteEnv
	DeleteEnv(context.Context, *DeleteEnvReq) (*DeleteEnvRsp, error)
	// GetEnvList 1. 获取环境列表：GetEnvList
	GetEnvList(context.Context, *GetEnvListReq) (*GetEnvListRsp, error)
	// UpdateEnv 4. 修改环境：UpdateEnv
	UpdateEnv(context.Context, *UpdateEnvReq) (*UpdateEnvRsp, error)
}

func RegisterEnvManageHTTPServer(s *http.Server, srv EnvManageHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/env_manage/list/{common.appId}", _EnvManage_GetEnvList0_HTTP_Handler(srv))
	r.POST("/admin/env_manage/{common.appId}/{envField}/{envName}", _EnvManage_CreateEnv0_HTTP_Handler(srv))
	r.DELETE("/admin/env_manage/{common.appId}/{envField}/{envName}", _EnvManage_DeleteEnv0_HTTP_Handler(srv))
	r.PUT("/admin/env_manage/{common.appId}/{envField}/{envName}", _EnvManage_UpdateEnv0_HTTP_Handler(srv))
}

func _EnvManage_GetEnvList0_HTTP_Handler(srv EnvManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEnvListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvManageGetEnvList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnvList(ctx, req.(*GetEnvListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEnvListRsp)
		return ctx.Result(200, reply)
	}
}

func _EnvManage_CreateEnv0_HTTP_Handler(srv EnvManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEnvReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvManageCreateEnv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEnv(ctx, req.(*CreateEnvReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEnvRsp)
		return ctx.Result(200, reply)
	}
}

func _EnvManage_DeleteEnv0_HTTP_Handler(srv EnvManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEnvReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvManageDeleteEnv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEnv(ctx, req.(*DeleteEnvReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEnvRsp)
		return ctx.Result(200, reply)
	}
}

func _EnvManage_UpdateEnv0_HTTP_Handler(srv EnvManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEnvReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvManageUpdateEnv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateEnv(ctx, req.(*UpdateEnvReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEnvRsp)
		return ctx.Result(200, reply)
	}
}

type EnvManageHTTPClient interface {
	CreateEnv(ctx context.Context, req *CreateEnvReq, opts ...http.CallOption) (rsp *CreateEnvRsp, err error)
	DeleteEnv(ctx context.Context, req *DeleteEnvReq, opts ...http.CallOption) (rsp *DeleteEnvRsp, err error)
	GetEnvList(ctx context.Context, req *GetEnvListReq, opts ...http.CallOption) (rsp *GetEnvListRsp, err error)
	UpdateEnv(ctx context.Context, req *UpdateEnvReq, opts ...http.CallOption) (rsp *UpdateEnvRsp, err error)
}

type EnvManageHTTPClientImpl struct {
	cc *http.Client
}

func NewEnvManageHTTPClient(client *http.Client) EnvManageHTTPClient {
	return &EnvManageHTTPClientImpl{client}
}

func (c *EnvManageHTTPClientImpl) CreateEnv(ctx context.Context, in *CreateEnvReq, opts ...http.CallOption) (*CreateEnvRsp, error) {
	var out CreateEnvRsp
	pattern := "/admin/env_manage/{common.appId}/{envField}/{envName}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEnvManageCreateEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvManageHTTPClientImpl) DeleteEnv(ctx context.Context, in *DeleteEnvReq, opts ...http.CallOption) (*DeleteEnvRsp, error) {
	var out DeleteEnvRsp
	pattern := "/admin/env_manage/{common.appId}/{envField}/{envName}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEnvManageDeleteEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvManageHTTPClientImpl) GetEnvList(ctx context.Context, in *GetEnvListReq, opts ...http.CallOption) (*GetEnvListRsp, error) {
	var out GetEnvListRsp
	pattern := "/admin/env_manage/list/{common.appId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEnvManageGetEnvList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvManageHTTPClientImpl) UpdateEnv(ctx context.Context, in *UpdateEnvReq, opts ...http.CallOption) (*UpdateEnvRsp, error) {
	var out UpdateEnvRsp
	pattern := "/admin/env_manage/{common.appId}/{envField}/{envName}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEnvManageUpdateEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
