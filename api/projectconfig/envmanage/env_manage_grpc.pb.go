// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/projectconfig/envmanage/env_manage.proto

package envmanage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnvManage_GetEnvList_FullMethodName = "/api.projectconfig.envmanage.EnvManage/GetEnvList"
	EnvManage_CreateEnv_FullMethodName  = "/api.projectconfig.envmanage.EnvManage/CreateEnv"
	EnvManage_DeleteEnv_FullMethodName  = "/api.projectconfig.envmanage.EnvManage/DeleteEnv"
	EnvManage_UpdateEnv_FullMethodName  = "/api.projectconfig.envmanage.EnvManage/UpdateEnv"
)

// EnvManageClient is the client API for EnvManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvManageClient interface {
	// 1. 获取环境列表：GetEnvList
	GetEnvList(ctx context.Context, in *GetEnvListReq, opts ...grpc.CallOption) (*GetEnvListRsp, error)
	// 2. 创建环境：CreateEnv
	CreateEnv(ctx context.Context, in *CreateEnvReq, opts ...grpc.CallOption) (*CreateEnvRsp, error)
	// 3. 删除环境：DeleteEnv
	DeleteEnv(ctx context.Context, in *DeleteEnvReq, opts ...grpc.CallOption) (*DeleteEnvRsp, error)
	// 4. 修改环境：UpdateEnv
	UpdateEnv(ctx context.Context, in *UpdateEnvReq, opts ...grpc.CallOption) (*UpdateEnvRsp, error)
}

type envManageClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvManageClient(cc grpc.ClientConnInterface) EnvManageClient {
	return &envManageClient{cc}
}

func (c *envManageClient) GetEnvList(ctx context.Context, in *GetEnvListReq, opts ...grpc.CallOption) (*GetEnvListRsp, error) {
	out := new(GetEnvListRsp)
	err := c.cc.Invoke(ctx, EnvManage_GetEnvList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManageClient) CreateEnv(ctx context.Context, in *CreateEnvReq, opts ...grpc.CallOption) (*CreateEnvRsp, error) {
	out := new(CreateEnvRsp)
	err := c.cc.Invoke(ctx, EnvManage_CreateEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManageClient) DeleteEnv(ctx context.Context, in *DeleteEnvReq, opts ...grpc.CallOption) (*DeleteEnvRsp, error) {
	out := new(DeleteEnvRsp)
	err := c.cc.Invoke(ctx, EnvManage_DeleteEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManageClient) UpdateEnv(ctx context.Context, in *UpdateEnvReq, opts ...grpc.CallOption) (*UpdateEnvRsp, error) {
	out := new(UpdateEnvRsp)
	err := c.cc.Invoke(ctx, EnvManage_UpdateEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvManageServer is the server API for EnvManage service.
// All implementations must embed UnimplementedEnvManageServer
// for forward compatibility
type EnvManageServer interface {
	// 1. 获取环境列表：GetEnvList
	GetEnvList(context.Context, *GetEnvListReq) (*GetEnvListRsp, error)
	// 2. 创建环境：CreateEnv
	CreateEnv(context.Context, *CreateEnvReq) (*CreateEnvRsp, error)
	// 3. 删除环境：DeleteEnv
	DeleteEnv(context.Context, *DeleteEnvReq) (*DeleteEnvRsp, error)
	// 4. 修改环境：UpdateEnv
	UpdateEnv(context.Context, *UpdateEnvReq) (*UpdateEnvRsp, error)
	mustEmbedUnimplementedEnvManageServer()
}

// UnimplementedEnvManageServer must be embedded to have forward compatible implementations.
type UnimplementedEnvManageServer struct {
}

func (UnimplementedEnvManageServer) GetEnvList(context.Context, *GetEnvListReq) (*GetEnvListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvList not implemented")
}
func (UnimplementedEnvManageServer) CreateEnv(context.Context, *CreateEnvReq) (*CreateEnvRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnv not implemented")
}
func (UnimplementedEnvManageServer) DeleteEnv(context.Context, *DeleteEnvReq) (*DeleteEnvRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnv not implemented")
}
func (UnimplementedEnvManageServer) UpdateEnv(context.Context, *UpdateEnvReq) (*UpdateEnvRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnv not implemented")
}
func (UnimplementedEnvManageServer) mustEmbedUnimplementedEnvManageServer() {}

// UnsafeEnvManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvManageServer will
// result in compilation errors.
type UnsafeEnvManageServer interface {
	mustEmbedUnimplementedEnvManageServer()
}

func RegisterEnvManageServer(s grpc.ServiceRegistrar, srv EnvManageServer) {
	s.RegisterService(&EnvManage_ServiceDesc, srv)
}

func _EnvManage_GetEnvList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManageServer).GetEnvList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManage_GetEnvList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManageServer).GetEnvList(ctx, req.(*GetEnvListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManage_CreateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManageServer).CreateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManage_CreateEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManageServer).CreateEnv(ctx, req.(*CreateEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManage_DeleteEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManageServer).DeleteEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManage_DeleteEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManageServer).DeleteEnv(ctx, req.(*DeleteEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManage_UpdateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManageServer).UpdateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManage_UpdateEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManageServer).UpdateEnv(ctx, req.(*UpdateEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvManage_ServiceDesc is the grpc.ServiceDesc for EnvManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.projectconfig.envmanage.EnvManage",
	HandlerType: (*EnvManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvList",
			Handler:    _EnvManage_GetEnvList_Handler,
		},
		{
			MethodName: "CreateEnv",
			Handler:    _EnvManage_CreateEnv_Handler,
		},
		{
			MethodName: "DeleteEnv",
			Handler:    _EnvManage_DeleteEnv_Handler,
		},
		{
			MethodName: "UpdateEnv",
			Handler:    _EnvManage_UpdateEnv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/projectconfig/envmanage/env_manage.proto",
}
